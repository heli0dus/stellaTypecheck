-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Stella.

module Stella.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Stella.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Stella.Abs.StellaIdent where
  prt _ (Stella.Abs.StellaIdent i) = doc $ showString i
instance Print Stella.Abs.ExtensionName where
  prt _ (Stella.Abs.ExtensionName i) = doc $ showString i
instance Print Stella.Abs.MemoryAddress where
  prt _ (Stella.Abs.MemoryAddress i) = doc $ showString i
instance Print Stella.Abs.Program where
  prt i = \case
    Stella.Abs.AProgram languagedecl extensions decls -> prPrec i 0 (concatD [prt 0 languagedecl, prt 0 extensions, prt 0 decls])

instance Print [Stella.Abs.StellaIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.LanguageDecl where
  prt i = \case
    Stella.Abs.LanguageCore -> prPrec i 0 (concatD [doc (showString "language"), doc (showString "core"), doc (showString ";")])

instance Print Stella.Abs.Extension where
  prt i = \case
    Stella.Abs.AnExtension extensionnames -> prPrec i 0 (concatD [doc (showString "extend"), doc (showString "with"), prt 0 extensionnames])

instance Print [Stella.Abs.ExtensionName] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Stella.Abs.Extension] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Stella.Abs.Decl where
  prt i = \case
    Stella.Abs.DeclFun annotations stellaident paramdecls returntype throwtype decls expr -> prPrec i 0 (concatD [prt 0 annotations, doc (showString "fn"), prt 0 stellaident, doc (showString "("), prt 0 paramdecls, doc (showString ")"), prt 0 returntype, prt 0 throwtype, doc (showString "{"), prt 0 decls, doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Abs.DeclFunGeneric annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> prPrec i 0 (concatD [prt 0 annotations, doc (showString "generic"), doc (showString "fn"), prt 0 stellaident, doc (showString "["), prt 0 stellaidents, doc (showString "]"), doc (showString "("), prt 0 paramdecls, doc (showString ")"), prt 0 returntype, prt 0 throwtype, doc (showString "{"), prt 0 decls, doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Abs.DeclTypeAlias stellaident type_ -> prPrec i 0 (concatD [doc (showString "type"), prt 0 stellaident, doc (showString "="), prt 0 type_])
    Stella.Abs.DeclExceptionType type_ -> prPrec i 0 (concatD [doc (showString "exception"), doc (showString "type"), doc (showString "="), prt 0 type_])
    Stella.Abs.DeclExceptionVariant stellaident type_ -> prPrec i 0 (concatD [doc (showString "exception"), doc (showString "variant"), prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Abs.Decl] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Stella.Abs.LocalDecl where
  prt i = \case
    Stella.Abs.ALocalDecl decl -> prPrec i 0 (concatD [prt 0 decl])

instance Print [Stella.Abs.LocalDecl] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Stella.Abs.Annotation where
  prt i = \case
    Stella.Abs.InlineAnnotation -> prPrec i 0 (concatD [doc (showString "inline")])

instance Print [Stella.Abs.Annotation] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Stella.Abs.ParamDecl where
  prt i = \case
    Stella.Abs.AParamDecl stellaident type_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Abs.ParamDecl] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.ReturnType where
  prt i = \case
    Stella.Abs.NoReturnType -> prPrec i 0 (concatD [])
    Stella.Abs.SomeReturnType type_ -> prPrec i 0 (concatD [doc (showString "->"), prt 0 type_])

instance Print Stella.Abs.ThrowType where
  prt i = \case
    Stella.Abs.NoThrowType -> prPrec i 0 (concatD [])
    Stella.Abs.SomeThrowType types -> prPrec i 0 (concatD [doc (showString "throws"), prt 9 types])

instance Print Stella.Abs.Type where
  prt i = \case
    Stella.Abs.TypeAuto -> prPrec i 0 (concatD [doc (showString "auto")])
    Stella.Abs.TypeFun types type_ -> prPrec i 0 (concatD [doc (showString "fn"), doc (showString "("), prt 0 types, doc (showString ")"), doc (showString "->"), prt 0 type_])
    Stella.Abs.TypeForAll stellaidents type_ -> prPrec i 0 (concatD [doc (showString "forall"), prt 0 stellaidents, doc (showString "."), prt 0 type_])
    Stella.Abs.TypeRec stellaident type_ -> prPrec i 0 (concatD [doc (showString "\181"), prt 0 stellaident, doc (showString "."), prt 0 type_])
    Stella.Abs.TypeSum type_1 type_2 -> prPrec i 1 (concatD [prt 2 type_1, doc (showString "+"), prt 2 type_2])
    Stella.Abs.TypeTuple types -> prPrec i 2 (concatD [doc (showString "{"), prt 0 types, doc (showString "}")])
    Stella.Abs.TypeRecord recordfieldtypes -> prPrec i 2 (concatD [doc (showString "{"), prt 0 recordfieldtypes, doc (showString "}")])
    Stella.Abs.TypeVariant variantfieldtypes -> prPrec i 2 (concatD [doc (showString "<|"), prt 0 variantfieldtypes, doc (showString "|>")])
    Stella.Abs.TypeList type_ -> prPrec i 2 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    Stella.Abs.TypeBool -> prPrec i 3 (concatD [doc (showString "Bool")])
    Stella.Abs.TypeNat -> prPrec i 3 (concatD [doc (showString "Nat")])
    Stella.Abs.TypeUnit -> prPrec i 3 (concatD [doc (showString "Unit")])
    Stella.Abs.TypeTop -> prPrec i 3 (concatD [doc (showString "Top")])
    Stella.Abs.TypeBottom -> prPrec i 3 (concatD [doc (showString "Bot")])
    Stella.Abs.TypeRef type_ -> prPrec i 3 (concatD [doc (showString "&"), prt 2 type_])
    Stella.Abs.TypeVar stellaident -> prPrec i 3 (concatD [prt 0 stellaident])

instance Print [Stella.Abs.Type] where
  prt 9 [x] = concatD [prt 9 x]
  prt 9 (x:xs) = concatD [prt 9 x, doc (showString ","), prt 9 xs]
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.MatchCase where
  prt i = \case
    Stella.Abs.AMatchCase pattern_ expr -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "=>"), prt 0 expr])

instance Print [Stella.Abs.MatchCase] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Stella.Abs.OptionalTyping where
  prt i = \case
    Stella.Abs.NoTyping -> prPrec i 0 (concatD [])
    Stella.Abs.SomeTyping type_ -> prPrec i 0 (concatD [doc (showString ":"), prt 0 type_])

instance Print Stella.Abs.PatternData where
  prt i = \case
    Stella.Abs.NoPatternData -> prPrec i 0 (concatD [])
    Stella.Abs.SomePatternData pattern_ -> prPrec i 0 (concatD [doc (showString "="), prt 0 pattern_])

instance Print Stella.Abs.ExprData where
  prt i = \case
    Stella.Abs.NoExprData -> prPrec i 0 (concatD [])
    Stella.Abs.SomeExprData expr -> prPrec i 0 (concatD [doc (showString "="), prt 0 expr])

instance Print Stella.Abs.Pattern where
  prt i = \case
    Stella.Abs.PatternCastAs pattern_ type_ -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "cast"), doc (showString "as"), prt 0 type_])
    Stella.Abs.PatternAsc pattern_ type_ -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "as"), prt 0 type_])
    Stella.Abs.PatternVariant stellaident patterndata -> prPrec i 0 (concatD [doc (showString "<|"), prt 0 stellaident, prt 0 patterndata, doc (showString "|>")])
    Stella.Abs.PatternInl pattern_ -> prPrec i 0 (concatD [doc (showString "inl"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Abs.PatternInr pattern_ -> prPrec i 0 (concatD [doc (showString "inr"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Abs.PatternTuple patterns -> prPrec i 0 (concatD [doc (showString "{"), prt 0 patterns, doc (showString "}")])
    Stella.Abs.PatternRecord labelledpatterns -> prPrec i 0 (concatD [doc (showString "{"), prt 0 labelledpatterns, doc (showString "}")])
    Stella.Abs.PatternList patterns -> prPrec i 0 (concatD [doc (showString "["), prt 0 patterns, doc (showString "]")])
    Stella.Abs.PatternCons pattern_1 pattern_2 -> prPrec i 0 (concatD [doc (showString "cons"), doc (showString "("), prt 0 pattern_1, doc (showString ","), prt 0 pattern_2, doc (showString ")")])
    Stella.Abs.PatternFalse -> prPrec i 0 (concatD [doc (showString "false")])
    Stella.Abs.PatternTrue -> prPrec i 0 (concatD [doc (showString "true")])
    Stella.Abs.PatternUnit -> prPrec i 0 (concatD [doc (showString "unit")])
    Stella.Abs.PatternInt n -> prPrec i 0 (concatD [prt 0 n])
    Stella.Abs.PatternSucc pattern_ -> prPrec i 0 (concatD [doc (showString "succ"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Abs.PatternVar stellaident -> prPrec i 0 (concatD [prt 0 stellaident])

instance Print [Stella.Abs.Pattern] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.LabelledPattern where
  prt i = \case
    Stella.Abs.ALabelledPattern stellaident pattern_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString "="), prt 0 pattern_])

instance Print [Stella.Abs.LabelledPattern] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.Binding where
  prt i = \case
    Stella.Abs.ABinding stellaident expr -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString "="), prt 0 expr])

instance Print [Stella.Abs.Binding] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.Expr where
  prt i = \case
    Stella.Abs.Sequence expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ";"), prt 0 expr2])
    Stella.Abs.Assign expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString ":="), prt 1 expr2])
    Stella.Abs.If expr1 expr2 expr3 -> prPrec i 1 (concatD [doc (showString "if"), prt 1 expr1, doc (showString "then"), prt 1 expr2, doc (showString "else"), prt 1 expr3])
    Stella.Abs.Let patternbindings expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 patternbindings, doc (showString "in"), prt 0 expr])
    Stella.Abs.LetRec patternbindings expr -> prPrec i 0 (concatD [doc (showString "letrec"), prt 0 patternbindings, doc (showString "in"), prt 0 expr])
    Stella.Abs.TypeAbstraction stellaidents expr -> prPrec i 0 (concatD [doc (showString "generic"), doc (showString "["), prt 0 stellaidents, doc (showString "]"), prt 0 expr])
    Stella.Abs.LessThan expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "<"), prt 3 expr2])
    Stella.Abs.LessThanOrEqual expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "<="), prt 3 expr2])
    Stella.Abs.GreaterThan expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ">"), prt 3 expr2])
    Stella.Abs.GreaterThanOrEqual expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ">="), prt 3 expr2])
    Stella.Abs.Equal expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "=="), prt 3 expr2])
    Stella.Abs.NotEqual expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "!="), prt 3 expr2])
    Stella.Abs.TypeAsc expr type_ -> prPrec i 3 (concatD [prt 3 expr, doc (showString "as"), prt 2 type_])
    Stella.Abs.TypeCast expr type_ -> prPrec i 3 (concatD [prt 3 expr, doc (showString "cast"), doc (showString "as"), prt 2 type_])
    Stella.Abs.Abstraction paramdecls expr -> prPrec i 3 (concatD [doc (showString "fn"), doc (showString "("), prt 0 paramdecls, doc (showString ")"), doc (showString "{"), doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Abs.Variant stellaident exprdata -> prPrec i 3 (concatD [doc (showString "<|"), prt 0 stellaident, prt 0 exprdata, doc (showString "|>")])
    Stella.Abs.Match expr matchcases -> prPrec i 3 (concatD [doc (showString "match"), prt 2 expr, doc (showString "{"), prt 0 matchcases, doc (showString "}")])
    Stella.Abs.List exprs -> prPrec i 3 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    Stella.Abs.Add expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "+"), prt 4 expr2])
    Stella.Abs.Subtract expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "-"), prt 4 expr2])
    Stella.Abs.LogicOr expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "or"), prt 4 expr2])
    Stella.Abs.Multiply expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "*"), prt 5 expr2])
    Stella.Abs.Divide expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "/"), prt 5 expr2])
    Stella.Abs.LogicAnd expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "and"), prt 5 expr2])
    Stella.Abs.Ref expr -> prPrec i 5 (concatD [doc (showString "new"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Deref expr -> prPrec i 5 (concatD [doc (showString "*"), prt 5 expr])
    Stella.Abs.Application expr exprs -> prPrec i 6 (concatD [prt 6 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Stella.Abs.TypeApplication expr types -> prPrec i 6 (concatD [prt 6 expr, doc (showString "["), prt 0 types, doc (showString "]")])
    Stella.Abs.DotRecord expr stellaident -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), prt 0 stellaident])
    Stella.Abs.DotTuple expr n -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), prt 0 n])
    Stella.Abs.Tuple exprs -> prPrec i 6 (concatD [doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Stella.Abs.Record bindings -> prPrec i 6 (concatD [doc (showString "{"), prt 0 bindings, doc (showString "}")])
    Stella.Abs.ConsList expr1 expr2 -> prPrec i 6 (concatD [doc (showString "cons"), doc (showString "("), prt 0 expr1, doc (showString ","), prt 0 expr2, doc (showString ")")])
    Stella.Abs.Head expr -> prPrec i 6 (concatD [doc (showString "List::head"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.IsEmpty expr -> prPrec i 6 (concatD [doc (showString "List::isempty"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Tail expr -> prPrec i 6 (concatD [doc (showString "List::tail"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Panic -> prPrec i 6 (concatD [doc (showString "panic!")])
    Stella.Abs.Throw expr -> prPrec i 6 (concatD [doc (showString "throw"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.TryCatch expr1 pattern_ expr2 -> prPrec i 6 (concatD [doc (showString "try"), doc (showString "{"), prt 0 expr1, doc (showString "}"), doc (showString "catch"), doc (showString "{"), prt 0 pattern_, doc (showString "=>"), prt 0 expr2, doc (showString "}")])
    Stella.Abs.TryWith expr1 expr2 -> prPrec i 6 (concatD [doc (showString "try"), doc (showString "{"), prt 0 expr1, doc (showString "}"), doc (showString "with"), doc (showString "{"), prt 0 expr2, doc (showString "}")])
    Stella.Abs.TryCastAs expr1 type_ pattern_ expr2 expr3 -> prPrec i 6 (concatD [doc (showString "try"), doc (showString "{"), prt 0 expr1, doc (showString "}"), doc (showString "cast"), doc (showString "as"), prt 0 type_, doc (showString "{"), prt 0 pattern_, doc (showString "=>"), prt 0 expr2, doc (showString "}"), doc (showString "with"), doc (showString "{"), prt 0 expr3, doc (showString "}")])
    Stella.Abs.Inl expr -> prPrec i 6 (concatD [doc (showString "inl"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Inr expr -> prPrec i 6 (concatD [doc (showString "inr"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Succ expr -> prPrec i 6 (concatD [doc (showString "succ"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.LogicNot expr -> prPrec i 6 (concatD [doc (showString "not"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Pred expr -> prPrec i 6 (concatD [doc (showString "Nat::pred"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.IsZero expr -> prPrec i 6 (concatD [doc (showString "Nat::iszero"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.Fix expr -> prPrec i 6 (concatD [doc (showString "fix"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Abs.NatRec expr1 expr2 expr3 -> prPrec i 6 (concatD [doc (showString "Nat::rec"), doc (showString "("), prt 0 expr1, doc (showString ","), prt 0 expr2, doc (showString ","), prt 0 expr3, doc (showString ")")])
    Stella.Abs.Fold type_ expr -> prPrec i 6 (concatD [doc (showString "fold"), doc (showString "["), prt 0 type_, doc (showString "]"), prt 7 expr])
    Stella.Abs.Unfold type_ expr -> prPrec i 6 (concatD [doc (showString "unfold"), doc (showString "["), prt 0 type_, doc (showString "]"), prt 7 expr])
    Stella.Abs.ConstTrue -> prPrec i 7 (concatD [doc (showString "true")])
    Stella.Abs.ConstFalse -> prPrec i 7 (concatD [doc (showString "false")])
    Stella.Abs.ConstUnit -> prPrec i 7 (concatD [doc (showString "unit")])
    Stella.Abs.ConstInt n -> prPrec i 7 (concatD [prt 0 n])
    Stella.Abs.ConstMemory memoryaddress -> prPrec i 7 (concatD [prt 0 memoryaddress])
    Stella.Abs.Var stellaident -> prPrec i 7 (concatD [prt 0 stellaident])

instance Print [Stella.Abs.Expr] where
  prt 2 [x] = concatD [prt 2 x, doc (showString ";")]
  prt 2 (x:xs) = concatD [prt 2 x, doc (showString ";"), prt 2 xs]
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.PatternBinding where
  prt i = \case
    Stella.Abs.APatternBinding pattern_ expr -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "="), prt 0 expr])

instance Print [Stella.Abs.PatternBinding] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.VariantFieldType where
  prt i = \case
    Stella.Abs.AVariantFieldType stellaident optionaltyping -> prPrec i 0 (concatD [prt 0 stellaident, prt 0 optionaltyping])

instance Print [Stella.Abs.VariantFieldType] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.RecordFieldType where
  prt i = \case
    Stella.Abs.ARecordFieldType stellaident type_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Abs.RecordFieldType] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stella.Abs.Typing where
  prt i = \case
    Stella.Abs.ATyping expr type_ -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":"), prt 0 type_])

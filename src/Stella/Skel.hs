-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Stella.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Stella.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transStellaIdent :: Stella.Abs.StellaIdent -> Result
transStellaIdent x = case x of
  Stella.Abs.StellaIdent string -> failure x

transExtensionName :: Stella.Abs.ExtensionName -> Result
transExtensionName x = case x of
  Stella.Abs.ExtensionName string -> failure x

transMemoryAddress :: Stella.Abs.MemoryAddress -> Result
transMemoryAddress x = case x of
  Stella.Abs.MemoryAddress string -> failure x

transProgram :: Stella.Abs.Program -> Result
transProgram x = case x of
  Stella.Abs.AProgram languagedecl extensions decls -> failure x

transLanguageDecl :: Stella.Abs.LanguageDecl -> Result
transLanguageDecl x = case x of
  Stella.Abs.LanguageCore -> failure x

transExtension :: Stella.Abs.Extension -> Result
transExtension x = case x of
  Stella.Abs.AnExtension extensionnames -> failure x

transDecl :: Stella.Abs.Decl -> Result
transDecl x = case x of
  Stella.Abs.DeclFun annotations stellaident paramdecls returntype throwtype decls expr -> failure x
  Stella.Abs.DeclFunGeneric annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> failure x
  Stella.Abs.DeclTypeAlias stellaident type_ -> failure x
  Stella.Abs.DeclExceptionType type_ -> failure x
  Stella.Abs.DeclExceptionVariant stellaident type_ -> failure x

transLocalDecl :: Stella.Abs.LocalDecl -> Result
transLocalDecl x = case x of
  Stella.Abs.ALocalDecl decl -> failure x

transAnnotation :: Stella.Abs.Annotation -> Result
transAnnotation x = case x of
  Stella.Abs.InlineAnnotation -> failure x

transParamDecl :: Stella.Abs.ParamDecl -> Result
transParamDecl x = case x of
  Stella.Abs.AParamDecl stellaident type_ -> failure x

transReturnType :: Stella.Abs.ReturnType -> Result
transReturnType x = case x of
  Stella.Abs.NoReturnType -> failure x
  Stella.Abs.SomeReturnType type_ -> failure x

transThrowType :: Stella.Abs.ThrowType -> Result
transThrowType x = case x of
  Stella.Abs.NoThrowType -> failure x
  Stella.Abs.SomeThrowType types -> failure x

transType :: Stella.Abs.Type -> Result
transType x = case x of
  Stella.Abs.TypeAuto -> failure x
  Stella.Abs.TypeFun types type_ -> failure x
  Stella.Abs.TypeForAll stellaidents type_ -> failure x
  Stella.Abs.TypeRec stellaident type_ -> failure x
  Stella.Abs.TypeSum type_1 type_2 -> failure x
  Stella.Abs.TypeTuple types -> failure x
  Stella.Abs.TypeRecord recordfieldtypes -> failure x
  Stella.Abs.TypeVariant variantfieldtypes -> failure x
  Stella.Abs.TypeList type_ -> failure x
  Stella.Abs.TypeBool -> failure x
  Stella.Abs.TypeNat -> failure x
  Stella.Abs.TypeUnit -> failure x
  Stella.Abs.TypeTop -> failure x
  Stella.Abs.TypeBottom -> failure x
  Stella.Abs.TypeRef type_ -> failure x
  Stella.Abs.TypeVar stellaident -> failure x

transMatchCase :: Stella.Abs.MatchCase -> Result
transMatchCase x = case x of
  Stella.Abs.AMatchCase pattern_ expr -> failure x

transOptionalTyping :: Stella.Abs.OptionalTyping -> Result
transOptionalTyping x = case x of
  Stella.Abs.NoTyping -> failure x
  Stella.Abs.SomeTyping type_ -> failure x

transPatternData :: Stella.Abs.PatternData -> Result
transPatternData x = case x of
  Stella.Abs.NoPatternData -> failure x
  Stella.Abs.SomePatternData pattern_ -> failure x

transExprData :: Stella.Abs.ExprData -> Result
transExprData x = case x of
  Stella.Abs.NoExprData -> failure x
  Stella.Abs.SomeExprData expr -> failure x

transPattern :: Stella.Abs.Pattern -> Result
transPattern x = case x of
  Stella.Abs.PatternCastAs pattern_ type_ -> failure x
  Stella.Abs.PatternAsc pattern_ type_ -> failure x
  Stella.Abs.PatternVariant stellaident patterndata -> failure x
  Stella.Abs.PatternInl pattern_ -> failure x
  Stella.Abs.PatternInr pattern_ -> failure x
  Stella.Abs.PatternTuple patterns -> failure x
  Stella.Abs.PatternRecord labelledpatterns -> failure x
  Stella.Abs.PatternList patterns -> failure x
  Stella.Abs.PatternCons pattern_1 pattern_2 -> failure x
  Stella.Abs.PatternFalse -> failure x
  Stella.Abs.PatternTrue -> failure x
  Stella.Abs.PatternUnit -> failure x
  Stella.Abs.PatternInt integer -> failure x
  Stella.Abs.PatternSucc pattern_ -> failure x
  Stella.Abs.PatternVar stellaident -> failure x

transLabelledPattern :: Stella.Abs.LabelledPattern -> Result
transLabelledPattern x = case x of
  Stella.Abs.ALabelledPattern stellaident pattern_ -> failure x

transBinding :: Stella.Abs.Binding -> Result
transBinding x = case x of
  Stella.Abs.ABinding stellaident expr -> failure x

transExpr :: Stella.Abs.Expr -> Result
transExpr x = case x of
  Stella.Abs.Sequence expr1 expr2 -> failure x
  Stella.Abs.Assign expr1 expr2 -> failure x
  Stella.Abs.If expr1 expr2 expr3 -> failure x
  Stella.Abs.Let patternbindings expr -> failure x
  Stella.Abs.LetRec patternbindings expr -> failure x
  Stella.Abs.TypeAbstraction stellaidents expr -> failure x
  Stella.Abs.LessThan expr1 expr2 -> failure x
  Stella.Abs.LessThanOrEqual expr1 expr2 -> failure x
  Stella.Abs.GreaterThan expr1 expr2 -> failure x
  Stella.Abs.GreaterThanOrEqual expr1 expr2 -> failure x
  Stella.Abs.Equal expr1 expr2 -> failure x
  Stella.Abs.NotEqual expr1 expr2 -> failure x
  Stella.Abs.TypeAsc expr type_ -> failure x
  Stella.Abs.TypeCast expr type_ -> failure x
  Stella.Abs.Abstraction paramdecls expr -> failure x
  Stella.Abs.Variant stellaident exprdata -> failure x
  Stella.Abs.Match expr matchcases -> failure x
  Stella.Abs.List exprs -> failure x
  Stella.Abs.Add expr1 expr2 -> failure x
  Stella.Abs.Subtract expr1 expr2 -> failure x
  Stella.Abs.LogicOr expr1 expr2 -> failure x
  Stella.Abs.Multiply expr1 expr2 -> failure x
  Stella.Abs.Divide expr1 expr2 -> failure x
  Stella.Abs.LogicAnd expr1 expr2 -> failure x
  Stella.Abs.Ref expr -> failure x
  Stella.Abs.Deref expr -> failure x
  Stella.Abs.Application expr exprs -> failure x
  Stella.Abs.TypeApplication expr types -> failure x
  Stella.Abs.DotRecord expr stellaident -> failure x
  Stella.Abs.DotTuple expr integer -> failure x
  Stella.Abs.Tuple exprs -> failure x
  Stella.Abs.Record bindings -> failure x
  Stella.Abs.ConsList expr1 expr2 -> failure x
  Stella.Abs.Head expr -> failure x
  Stella.Abs.IsEmpty expr -> failure x
  Stella.Abs.Tail expr -> failure x
  Stella.Abs.Panic -> failure x
  Stella.Abs.Throw expr -> failure x
  Stella.Abs.TryCatch expr1 pattern_ expr2 -> failure x
  Stella.Abs.TryWith expr1 expr2 -> failure x
  Stella.Abs.TryCastAs expr1 type_ pattern_ expr2 expr3 -> failure x
  Stella.Abs.Inl expr -> failure x
  Stella.Abs.Inr expr -> failure x
  Stella.Abs.Succ expr -> failure x
  Stella.Abs.LogicNot expr -> failure x
  Stella.Abs.Pred expr -> failure x
  Stella.Abs.IsZero expr -> failure x
  Stella.Abs.Fix expr -> failure x
  Stella.Abs.NatRec expr1 expr2 expr3 -> failure x
  Stella.Abs.Fold type_ expr -> failure x
  Stella.Abs.Unfold type_ expr -> failure x
  Stella.Abs.ConstTrue -> failure x
  Stella.Abs.ConstFalse -> failure x
  Stella.Abs.ConstUnit -> failure x
  Stella.Abs.ConstInt integer -> failure x
  Stella.Abs.ConstMemory memoryaddress -> failure x
  Stella.Abs.Var stellaident -> failure x

transPatternBinding :: Stella.Abs.PatternBinding -> Result
transPatternBinding x = case x of
  Stella.Abs.APatternBinding pattern_ expr -> failure x

transVariantFieldType :: Stella.Abs.VariantFieldType -> Result
transVariantFieldType x = case x of
  Stella.Abs.AVariantFieldType stellaident optionaltyping -> failure x

transRecordFieldType :: Stella.Abs.RecordFieldType -> Result
transRecordFieldType x = case x of
  Stella.Abs.ARecordFieldType stellaident type_ -> failure x

transTyping :: Stella.Abs.Typing -> Result
transTyping x = case x of
  Stella.Abs.ATyping expr type_ -> failure x

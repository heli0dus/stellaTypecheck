{-# OPTIONS_GHC -w #-}
{-# OPTIONS -XMagicHash -XBangPatterns -XTypeSynonymInstances -XFlexibleInstances -cpp #-}
#if __GLASGOW_HASKELL__ >= 710
{-# OPTIONS_GHC -XPartialTypeSignatures #-}
#endif
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Stella.Par
  ( happyError
  , myLexer
  , pProgram
  , pListStellaIdent
  , pLanguageDecl
  , pExtension
  , pListExtensionName
  , pListExtension
  , pDecl
  , pListDecl
  , pLocalDecl
  , pListLocalDecl
  , pAnnotation
  , pListAnnotation
  , pParamDecl
  , pListParamDecl
  , pReturnType
  , pThrowType
  , pType9
  , pListType9
  , pMatchCase
  , pListMatchCase
  , pOptionalTyping
  , pPatternData
  , pExprData
  , pPattern
  , pListPattern
  , pLabelledPattern
  , pListLabelledPattern
  , pBinding
  , pListBinding
  , pExpr
  , pListExpr
  , pExpr1
  , pPatternBinding
  , pListPatternBinding
  , pExpr2
  , pListExpr2
  , pExpr3
  , pExpr4
  , pExpr5
  , pExpr6
  , pExpr7
  , pType
  , pType1
  , pType2
  , pType3
  , pListType
  , pVariantFieldType
  , pListVariantFieldType
  , pRecordFieldType
  , pListRecordFieldType
  , pTyping
  ) where

import Prelude

import qualified Stella.Abs
import Stella.Lex
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import qualified GHC.Exts as Happy_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.20.1.1

newtype HappyAbsSyn  = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
newtype HappyWrap54 = HappyWrap54 (Integer)
happyIn54 :: (Integer) -> (HappyAbsSyn )
happyIn54 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap54 x)
{-# INLINE happyIn54 #-}
happyOut54 :: (HappyAbsSyn ) -> HappyWrap54
happyOut54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut54 #-}
newtype HappyWrap55 = HappyWrap55 (Stella.Abs.StellaIdent)
happyIn55 :: (Stella.Abs.StellaIdent) -> (HappyAbsSyn )
happyIn55 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap55 x)
{-# INLINE happyIn55 #-}
happyOut55 :: (HappyAbsSyn ) -> HappyWrap55
happyOut55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut55 #-}
newtype HappyWrap56 = HappyWrap56 (Stella.Abs.ExtensionName)
happyIn56 :: (Stella.Abs.ExtensionName) -> (HappyAbsSyn )
happyIn56 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap56 x)
{-# INLINE happyIn56 #-}
happyOut56 :: (HappyAbsSyn ) -> HappyWrap56
happyOut56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut56 #-}
newtype HappyWrap57 = HappyWrap57 (Stella.Abs.MemoryAddress)
happyIn57 :: (Stella.Abs.MemoryAddress) -> (HappyAbsSyn )
happyIn57 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap57 x)
{-# INLINE happyIn57 #-}
happyOut57 :: (HappyAbsSyn ) -> HappyWrap57
happyOut57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut57 #-}
newtype HappyWrap58 = HappyWrap58 (Stella.Abs.Program)
happyIn58 :: (Stella.Abs.Program) -> (HappyAbsSyn )
happyIn58 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap58 x)
{-# INLINE happyIn58 #-}
happyOut58 :: (HappyAbsSyn ) -> HappyWrap58
happyOut58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut58 #-}
newtype HappyWrap59 = HappyWrap59 ([Stella.Abs.StellaIdent])
happyIn59 :: ([Stella.Abs.StellaIdent]) -> (HappyAbsSyn )
happyIn59 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap59 x)
{-# INLINE happyIn59 #-}
happyOut59 :: (HappyAbsSyn ) -> HappyWrap59
happyOut59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut59 #-}
newtype HappyWrap60 = HappyWrap60 (Stella.Abs.LanguageDecl)
happyIn60 :: (Stella.Abs.LanguageDecl) -> (HappyAbsSyn )
happyIn60 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap60 x)
{-# INLINE happyIn60 #-}
happyOut60 :: (HappyAbsSyn ) -> HappyWrap60
happyOut60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut60 #-}
newtype HappyWrap61 = HappyWrap61 (Stella.Abs.Extension)
happyIn61 :: (Stella.Abs.Extension) -> (HappyAbsSyn )
happyIn61 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap61 x)
{-# INLINE happyIn61 #-}
happyOut61 :: (HappyAbsSyn ) -> HappyWrap61
happyOut61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut61 #-}
newtype HappyWrap62 = HappyWrap62 ([Stella.Abs.ExtensionName])
happyIn62 :: ([Stella.Abs.ExtensionName]) -> (HappyAbsSyn )
happyIn62 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap62 x)
{-# INLINE happyIn62 #-}
happyOut62 :: (HappyAbsSyn ) -> HappyWrap62
happyOut62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut62 #-}
newtype HappyWrap63 = HappyWrap63 ([Stella.Abs.Extension])
happyIn63 :: ([Stella.Abs.Extension]) -> (HappyAbsSyn )
happyIn63 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap63 x)
{-# INLINE happyIn63 #-}
happyOut63 :: (HappyAbsSyn ) -> HappyWrap63
happyOut63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut63 #-}
newtype HappyWrap64 = HappyWrap64 (Stella.Abs.Decl)
happyIn64 :: (Stella.Abs.Decl) -> (HappyAbsSyn )
happyIn64 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap64 x)
{-# INLINE happyIn64 #-}
happyOut64 :: (HappyAbsSyn ) -> HappyWrap64
happyOut64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut64 #-}
newtype HappyWrap65 = HappyWrap65 ([Stella.Abs.Decl])
happyIn65 :: ([Stella.Abs.Decl]) -> (HappyAbsSyn )
happyIn65 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap65 x)
{-# INLINE happyIn65 #-}
happyOut65 :: (HappyAbsSyn ) -> HappyWrap65
happyOut65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut65 #-}
newtype HappyWrap66 = HappyWrap66 (Stella.Abs.LocalDecl)
happyIn66 :: (Stella.Abs.LocalDecl) -> (HappyAbsSyn )
happyIn66 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap66 x)
{-# INLINE happyIn66 #-}
happyOut66 :: (HappyAbsSyn ) -> HappyWrap66
happyOut66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut66 #-}
newtype HappyWrap67 = HappyWrap67 ([Stella.Abs.LocalDecl])
happyIn67 :: ([Stella.Abs.LocalDecl]) -> (HappyAbsSyn )
happyIn67 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap67 x)
{-# INLINE happyIn67 #-}
happyOut67 :: (HappyAbsSyn ) -> HappyWrap67
happyOut67 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut67 #-}
newtype HappyWrap68 = HappyWrap68 (Stella.Abs.Annotation)
happyIn68 :: (Stella.Abs.Annotation) -> (HappyAbsSyn )
happyIn68 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap68 x)
{-# INLINE happyIn68 #-}
happyOut68 :: (HappyAbsSyn ) -> HappyWrap68
happyOut68 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut68 #-}
newtype HappyWrap69 = HappyWrap69 ([Stella.Abs.Annotation])
happyIn69 :: ([Stella.Abs.Annotation]) -> (HappyAbsSyn )
happyIn69 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap69 x)
{-# INLINE happyIn69 #-}
happyOut69 :: (HappyAbsSyn ) -> HappyWrap69
happyOut69 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut69 #-}
newtype HappyWrap70 = HappyWrap70 (Stella.Abs.ParamDecl)
happyIn70 :: (Stella.Abs.ParamDecl) -> (HappyAbsSyn )
happyIn70 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap70 x)
{-# INLINE happyIn70 #-}
happyOut70 :: (HappyAbsSyn ) -> HappyWrap70
happyOut70 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut70 #-}
newtype HappyWrap71 = HappyWrap71 ([Stella.Abs.ParamDecl])
happyIn71 :: ([Stella.Abs.ParamDecl]) -> (HappyAbsSyn )
happyIn71 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap71 x)
{-# INLINE happyIn71 #-}
happyOut71 :: (HappyAbsSyn ) -> HappyWrap71
happyOut71 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut71 #-}
newtype HappyWrap72 = HappyWrap72 (Stella.Abs.ReturnType)
happyIn72 :: (Stella.Abs.ReturnType) -> (HappyAbsSyn )
happyIn72 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap72 x)
{-# INLINE happyIn72 #-}
happyOut72 :: (HappyAbsSyn ) -> HappyWrap72
happyOut72 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut72 #-}
newtype HappyWrap73 = HappyWrap73 (Stella.Abs.ThrowType)
happyIn73 :: (Stella.Abs.ThrowType) -> (HappyAbsSyn )
happyIn73 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap73 x)
{-# INLINE happyIn73 #-}
happyOut73 :: (HappyAbsSyn ) -> HappyWrap73
happyOut73 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut73 #-}
newtype HappyWrap74 = HappyWrap74 (Stella.Abs.Type)
happyIn74 :: (Stella.Abs.Type) -> (HappyAbsSyn )
happyIn74 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap74 x)
{-# INLINE happyIn74 #-}
happyOut74 :: (HappyAbsSyn ) -> HappyWrap74
happyOut74 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut74 #-}
newtype HappyWrap75 = HappyWrap75 ([Stella.Abs.Type])
happyIn75 :: ([Stella.Abs.Type]) -> (HappyAbsSyn )
happyIn75 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap75 x)
{-# INLINE happyIn75 #-}
happyOut75 :: (HappyAbsSyn ) -> HappyWrap75
happyOut75 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut75 #-}
newtype HappyWrap76 = HappyWrap76 (Stella.Abs.MatchCase)
happyIn76 :: (Stella.Abs.MatchCase) -> (HappyAbsSyn )
happyIn76 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap76 x)
{-# INLINE happyIn76 #-}
happyOut76 :: (HappyAbsSyn ) -> HappyWrap76
happyOut76 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut76 #-}
newtype HappyWrap77 = HappyWrap77 ([Stella.Abs.MatchCase])
happyIn77 :: ([Stella.Abs.MatchCase]) -> (HappyAbsSyn )
happyIn77 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap77 x)
{-# INLINE happyIn77 #-}
happyOut77 :: (HappyAbsSyn ) -> HappyWrap77
happyOut77 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut77 #-}
newtype HappyWrap78 = HappyWrap78 (Stella.Abs.OptionalTyping)
happyIn78 :: (Stella.Abs.OptionalTyping) -> (HappyAbsSyn )
happyIn78 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap78 x)
{-# INLINE happyIn78 #-}
happyOut78 :: (HappyAbsSyn ) -> HappyWrap78
happyOut78 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut78 #-}
newtype HappyWrap79 = HappyWrap79 (Stella.Abs.PatternData)
happyIn79 :: (Stella.Abs.PatternData) -> (HappyAbsSyn )
happyIn79 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap79 x)
{-# INLINE happyIn79 #-}
happyOut79 :: (HappyAbsSyn ) -> HappyWrap79
happyOut79 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut79 #-}
newtype HappyWrap80 = HappyWrap80 (Stella.Abs.ExprData)
happyIn80 :: (Stella.Abs.ExprData) -> (HappyAbsSyn )
happyIn80 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap80 x)
{-# INLINE happyIn80 #-}
happyOut80 :: (HappyAbsSyn ) -> HappyWrap80
happyOut80 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut80 #-}
newtype HappyWrap81 = HappyWrap81 (Stella.Abs.Pattern)
happyIn81 :: (Stella.Abs.Pattern) -> (HappyAbsSyn )
happyIn81 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap81 x)
{-# INLINE happyIn81 #-}
happyOut81 :: (HappyAbsSyn ) -> HappyWrap81
happyOut81 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut81 #-}
newtype HappyWrap82 = HappyWrap82 ([Stella.Abs.Pattern])
happyIn82 :: ([Stella.Abs.Pattern]) -> (HappyAbsSyn )
happyIn82 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap82 x)
{-# INLINE happyIn82 #-}
happyOut82 :: (HappyAbsSyn ) -> HappyWrap82
happyOut82 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut82 #-}
newtype HappyWrap83 = HappyWrap83 (Stella.Abs.LabelledPattern)
happyIn83 :: (Stella.Abs.LabelledPattern) -> (HappyAbsSyn )
happyIn83 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap83 x)
{-# INLINE happyIn83 #-}
happyOut83 :: (HappyAbsSyn ) -> HappyWrap83
happyOut83 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut83 #-}
newtype HappyWrap84 = HappyWrap84 ([Stella.Abs.LabelledPattern])
happyIn84 :: ([Stella.Abs.LabelledPattern]) -> (HappyAbsSyn )
happyIn84 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap84 x)
{-# INLINE happyIn84 #-}
happyOut84 :: (HappyAbsSyn ) -> HappyWrap84
happyOut84 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut84 #-}
newtype HappyWrap85 = HappyWrap85 (Stella.Abs.Binding)
happyIn85 :: (Stella.Abs.Binding) -> (HappyAbsSyn )
happyIn85 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap85 x)
{-# INLINE happyIn85 #-}
happyOut85 :: (HappyAbsSyn ) -> HappyWrap85
happyOut85 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut85 #-}
newtype HappyWrap86 = HappyWrap86 ([Stella.Abs.Binding])
happyIn86 :: ([Stella.Abs.Binding]) -> (HappyAbsSyn )
happyIn86 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap86 x)
{-# INLINE happyIn86 #-}
happyOut86 :: (HappyAbsSyn ) -> HappyWrap86
happyOut86 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut86 #-}
newtype HappyWrap87 = HappyWrap87 (Stella.Abs.Expr)
happyIn87 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn87 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap87 x)
{-# INLINE happyIn87 #-}
happyOut87 :: (HappyAbsSyn ) -> HappyWrap87
happyOut87 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut87 #-}
newtype HappyWrap88 = HappyWrap88 ([Stella.Abs.Expr])
happyIn88 :: ([Stella.Abs.Expr]) -> (HappyAbsSyn )
happyIn88 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap88 x)
{-# INLINE happyIn88 #-}
happyOut88 :: (HappyAbsSyn ) -> HappyWrap88
happyOut88 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut88 #-}
newtype HappyWrap89 = HappyWrap89 (Stella.Abs.Expr)
happyIn89 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn89 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap89 x)
{-# INLINE happyIn89 #-}
happyOut89 :: (HappyAbsSyn ) -> HappyWrap89
happyOut89 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut89 #-}
newtype HappyWrap90 = HappyWrap90 (Stella.Abs.PatternBinding)
happyIn90 :: (Stella.Abs.PatternBinding) -> (HappyAbsSyn )
happyIn90 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap90 x)
{-# INLINE happyIn90 #-}
happyOut90 :: (HappyAbsSyn ) -> HappyWrap90
happyOut90 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut90 #-}
newtype HappyWrap91 = HappyWrap91 ([Stella.Abs.PatternBinding])
happyIn91 :: ([Stella.Abs.PatternBinding]) -> (HappyAbsSyn )
happyIn91 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap91 x)
{-# INLINE happyIn91 #-}
happyOut91 :: (HappyAbsSyn ) -> HappyWrap91
happyOut91 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut91 #-}
newtype HappyWrap92 = HappyWrap92 (Stella.Abs.Expr)
happyIn92 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn92 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap92 x)
{-# INLINE happyIn92 #-}
happyOut92 :: (HappyAbsSyn ) -> HappyWrap92
happyOut92 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut92 #-}
newtype HappyWrap93 = HappyWrap93 ([Stella.Abs.Expr])
happyIn93 :: ([Stella.Abs.Expr]) -> (HappyAbsSyn )
happyIn93 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap93 x)
{-# INLINE happyIn93 #-}
happyOut93 :: (HappyAbsSyn ) -> HappyWrap93
happyOut93 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut93 #-}
newtype HappyWrap94 = HappyWrap94 (Stella.Abs.Expr)
happyIn94 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn94 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap94 x)
{-# INLINE happyIn94 #-}
happyOut94 :: (HappyAbsSyn ) -> HappyWrap94
happyOut94 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut94 #-}
newtype HappyWrap95 = HappyWrap95 (Stella.Abs.Expr)
happyIn95 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn95 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap95 x)
{-# INLINE happyIn95 #-}
happyOut95 :: (HappyAbsSyn ) -> HappyWrap95
happyOut95 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut95 #-}
newtype HappyWrap96 = HappyWrap96 (Stella.Abs.Expr)
happyIn96 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn96 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap96 x)
{-# INLINE happyIn96 #-}
happyOut96 :: (HappyAbsSyn ) -> HappyWrap96
happyOut96 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut96 #-}
newtype HappyWrap97 = HappyWrap97 (Stella.Abs.Expr)
happyIn97 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn97 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap97 x)
{-# INLINE happyIn97 #-}
happyOut97 :: (HappyAbsSyn ) -> HappyWrap97
happyOut97 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut97 #-}
newtype HappyWrap98 = HappyWrap98 (Stella.Abs.Expr)
happyIn98 :: (Stella.Abs.Expr) -> (HappyAbsSyn )
happyIn98 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap98 x)
{-# INLINE happyIn98 #-}
happyOut98 :: (HappyAbsSyn ) -> HappyWrap98
happyOut98 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut98 #-}
newtype HappyWrap99 = HappyWrap99 (Stella.Abs.Type)
happyIn99 :: (Stella.Abs.Type) -> (HappyAbsSyn )
happyIn99 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap99 x)
{-# INLINE happyIn99 #-}
happyOut99 :: (HappyAbsSyn ) -> HappyWrap99
happyOut99 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut99 #-}
newtype HappyWrap100 = HappyWrap100 (Stella.Abs.Type)
happyIn100 :: (Stella.Abs.Type) -> (HappyAbsSyn )
happyIn100 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap100 x)
{-# INLINE happyIn100 #-}
happyOut100 :: (HappyAbsSyn ) -> HappyWrap100
happyOut100 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut100 #-}
newtype HappyWrap101 = HappyWrap101 (Stella.Abs.Type)
happyIn101 :: (Stella.Abs.Type) -> (HappyAbsSyn )
happyIn101 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap101 x)
{-# INLINE happyIn101 #-}
happyOut101 :: (HappyAbsSyn ) -> HappyWrap101
happyOut101 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut101 #-}
newtype HappyWrap102 = HappyWrap102 (Stella.Abs.Type)
happyIn102 :: (Stella.Abs.Type) -> (HappyAbsSyn )
happyIn102 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap102 x)
{-# INLINE happyIn102 #-}
happyOut102 :: (HappyAbsSyn ) -> HappyWrap102
happyOut102 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut102 #-}
newtype HappyWrap103 = HappyWrap103 ([Stella.Abs.Type])
happyIn103 :: ([Stella.Abs.Type]) -> (HappyAbsSyn )
happyIn103 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap103 x)
{-# INLINE happyIn103 #-}
happyOut103 :: (HappyAbsSyn ) -> HappyWrap103
happyOut103 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut103 #-}
newtype HappyWrap104 = HappyWrap104 (Stella.Abs.VariantFieldType)
happyIn104 :: (Stella.Abs.VariantFieldType) -> (HappyAbsSyn )
happyIn104 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap104 x)
{-# INLINE happyIn104 #-}
happyOut104 :: (HappyAbsSyn ) -> HappyWrap104
happyOut104 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut104 #-}
newtype HappyWrap105 = HappyWrap105 ([Stella.Abs.VariantFieldType])
happyIn105 :: ([Stella.Abs.VariantFieldType]) -> (HappyAbsSyn )
happyIn105 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap105 x)
{-# INLINE happyIn105 #-}
happyOut105 :: (HappyAbsSyn ) -> HappyWrap105
happyOut105 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut105 #-}
newtype HappyWrap106 = HappyWrap106 (Stella.Abs.RecordFieldType)
happyIn106 :: (Stella.Abs.RecordFieldType) -> (HappyAbsSyn )
happyIn106 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap106 x)
{-# INLINE happyIn106 #-}
happyOut106 :: (HappyAbsSyn ) -> HappyWrap106
happyOut106 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut106 #-}
newtype HappyWrap107 = HappyWrap107 ([Stella.Abs.RecordFieldType])
happyIn107 :: ([Stella.Abs.RecordFieldType]) -> (HappyAbsSyn )
happyIn107 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap107 x)
{-# INLINE happyIn107 #-}
happyOut107 :: (HappyAbsSyn ) -> HappyWrap107
happyOut107 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut107 #-}
newtype HappyWrap108 = HappyWrap108 (Stella.Abs.Typing)
happyIn108 :: (Stella.Abs.Typing) -> (HappyAbsSyn )
happyIn108 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap108 x)
{-# INLINE happyIn108 #-}
happyOut108 :: (HappyAbsSyn ) -> HappyWrap108
happyOut108 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut108 #-}
happyInTok :: (Token) -> (HappyAbsSyn )
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn ) -> (Token)
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyExpList :: HappyAddr
happyExpList = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x01\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x04\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x08\x84\x80\x02\x88\x48\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x08\x84\x80\x02\x88\x48\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xa7\xe2\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x40\x00\x80\x40\x08\x28\x80\x88\x84\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa1\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\x87\xe2\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\x1e\x8a\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\xc0\x1d\x40\x58\x28\xac\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x77\x00\x61\xa1\xb0\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\xdc\x01\x84\x85\x82\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x02\x00\x00\x22\x60\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x03\x00\x00\x00\x00\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x0e\x00\x00\x00\x00\x40\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x8c\x18\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\x02\xd3\x00\x40\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x77\x00\x61\xa1\xb0\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\x2a\xae\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x40\x00\x80\x40\x08\x28\x80\x88\x84\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa1\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x00\x00\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x23\x80\x02\x00\x00\x10\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x20\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x04\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x00\x40\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x23\x80\x02\x00\x00\x10\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x04\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x04\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x04\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x23\x80\x02\x00\x00\x10\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x08\x84\x80\x02\x88\x48\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x40\x00\x80\x40\x08\x28\x80\x88\x84\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x01\x00\x02\x21\xa0\x00\x22\x12\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\x1e\x8a\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\xc0\x1d\x40\x58\x28\xac\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x77\x00\x61\xa1\xb0\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x0e\x00\x00\x00\x00\x40\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\xc0\x1d\x40\x58\x28\xac\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x77\x00\x61\xa1\xb0\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x00\xdc\x01\x84\x85\xc2\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x00\x70\x07\x10\x16\x0a\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x03\x00\x00\x00\x00\x10\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa1\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\x87\xe2\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\x1e\x8a\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\x28\xae\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa1\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\x87\xe2\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\x9e\x8a\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\xc1\x88\x23\x80\x02\x00\x00\x10\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x50\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x00\x40\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x05\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x14\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x50\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x00\x40\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa9\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x08\x84\x80\x02\x88\x48\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x00\x00\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x10\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x40\x00\x80\x40\x08\x28\x80\x88\x84\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x23\x8e\x00\x0a\x00\x00\x40\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x40\x30\xe2\x08\xa0\x00\x00\x00\x44\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x08\x00\x00\x88\x80\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x20\x00\x00\x20\x02\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xa9\xb8\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x08\x84\x80\x02\x88\x48\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x10\x8c\x38\x02\x28\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x10\x70\x27\x10\xde\xea\xab\x36\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x10\x00\x20\x10\x02\x0a\x20\x22\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x01\x77\x02\xe1\xad\xbe\x6a\x13\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x40\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x40\xc0\x9d\x40\x78\xab\xaf\xda\x84\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x04\xdc\x09\x84\xb7\xfa\xaa\x4d\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

{-# NOINLINE happyExpListPerState #-}
happyExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_pProgram","%start_pListStellaIdent","%start_pLanguageDecl","%start_pExtension","%start_pListExtensionName","%start_pListExtension","%start_pDecl","%start_pListDecl","%start_pLocalDecl","%start_pListLocalDecl","%start_pAnnotation","%start_pListAnnotation","%start_pParamDecl","%start_pListParamDecl","%start_pReturnType","%start_pThrowType","%start_pType9","%start_pListType9","%start_pMatchCase","%start_pListMatchCase","%start_pOptionalTyping","%start_pPatternData","%start_pExprData","%start_pPattern","%start_pListPattern","%start_pLabelledPattern","%start_pListLabelledPattern","%start_pBinding","%start_pListBinding","%start_pExpr","%start_pListExpr","%start_pExpr1","%start_pPatternBinding","%start_pListPatternBinding","%start_pExpr2","%start_pListExpr2","%start_pExpr3","%start_pExpr4","%start_pExpr5","%start_pExpr6","%start_pExpr7","%start_pType","%start_pType1","%start_pType2","%start_pType3","%start_pListType","%start_pVariantFieldType","%start_pListVariantFieldType","%start_pRecordFieldType","%start_pListRecordFieldType","%start_pTyping","Integer","StellaIdent","ExtensionName","MemoryAddress","Program","ListStellaIdent","LanguageDecl","Extension","ListExtensionName","ListExtension","Decl","ListDecl","LocalDecl","ListLocalDecl","Annotation","ListAnnotation","ParamDecl","ListParamDecl","ReturnType","ThrowType","Type9","ListType9","MatchCase","ListMatchCase","OptionalTyping","PatternData","ExprData","Pattern","ListPattern","LabelledPattern","ListLabelledPattern","Binding","ListBinding","Expr","ListExpr","Expr1","PatternBinding","ListPatternBinding","Expr2","ListExpr2","Expr3","Expr4","Expr5","Expr6","Expr7","Type","Type1","Type2","Type3","ListType","VariantFieldType","ListVariantFieldType","RecordFieldType","ListRecordFieldType","Typing","'!='","'&'","'('","')'","'*'","'+'","','","'-'","'->'","'.'","'/'","':'","':='","';'","'<'","'<='","'<|'","'='","'=='","'=>'","'>'","'>='","'Bool'","'Bot'","'List::head'","'List::isempty'","'List::tail'","'Nat'","'Nat::iszero'","'Nat::pred'","'Nat::rec'","'Top'","'Unit'","'['","']'","'and'","'as'","'auto'","'cast'","'catch'","'cons'","'core'","'else'","'exception'","'extend'","'false'","'fix'","'fn'","'fold'","'forall'","'generic'","'if'","'in'","'inl'","'inline'","'inr'","'language'","'let'","'letrec'","'match'","'new'","'not'","'or'","'panic!'","'return'","'succ'","'then'","'throw'","'throws'","'true'","'try'","'type'","'unfold'","'unit'","'variant'","'with'","'{'","'|'","'|>'","'}'","'\181'","L_integ","L_StellaIdent","L_ExtensionName","L_MemoryAddress","%eof"]
        bit_start = st Prelude.* 194
        bit_end = (st Prelude.+ 1) Prelude.* 194
        read_bit = readArrayBit happyExpList
        bits = Prelude.map read_bit [bit_start..bit_end Prelude.- 1]
        bits_indexed = Prelude.zip bits [0..193]
        token_strs_expected = Prelude.concatMap f bits_indexed
        f (Prelude.False, _) = []
        f (Prelude.True, nr) = [token_strs Prelude.!! nr]

happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\xcb\xff\xbc\xff\xdb\xff\xf7\xff\xd5\xff\x25\x00\x32\x01\xbe\x01\x32\x01\x10\x02\x2b\x00\x2b\x00\x51\x00\x51\x00\xab\x00\x95\x00\x45\x01\x45\x01\x4a\x01\x4a\x01\xd9\x00\xeb\x00\xfd\x00\x4a\x01\x4a\x01\xe4\x00\xe4\x00\xe4\x00\xe4\x00\x04\x00\x04\x00\x42\x00\x4a\x01\x4a\x01\x80\x00\x80\x00\x80\x00\xbe\x00\xbe\x00\xfc\x00\x22\x00\x45\x01\x07\x01\x07\x01\x10\x00\x45\x01\xe4\x00\xe4\x00\xe4\x00\xe4\x00\x04\x00\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x01\x3d\x01\x52\x01\x6e\x01\x06\x00\x00\x00\x99\x00\x00\x00\x01\x01\x04\x00\xbe\x00\x15\x01\x6b\x01\x82\x01\xa7\x01\xc8\x01\xe9\x01\xfc\x01\x04\x00\x02\x02\x00\x00\x2c\x02\x4a\x02\x68\x01\xeb\x01\x42\x00\x5b\x02\x61\x02\x4a\x01\x4a\x01\x80\x00\x62\x02\x6a\x02\x00\x00\x88\x02\x8f\x02\x00\x00\x6d\x01\x06\x02\x00\x00\x04\x00\x00\x00\x00\x00\x31\x02\x7d\x02\x44\x02\x44\x02\xa8\x02\xae\x02\x64\x02\x64\x02\x00\x00\xb1\x02\x00\x00\xb5\x02\x00\x00\x68\x02\x07\x01\x45\x01\x79\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x01\x00\x00\xd5\x02\x91\x02\x45\x01\x91\x02\x9a\x02\x9a\x02\x9a\x02\x9a\x02\x9a\x02\xfe\xff\x9a\x02\x4a\x00\x90\x00\xee\x02\xb2\x02\xb2\x02\x00\x00\x00\x00\x4d\x02\x0d\x03\xca\x02\x4a\x01\xd9\x02\x4a\x01\x35\x03\x00\x00\x41\x03\x4d\x03\x59\x03\x00\x00\x00\x00\x4a\x01\x12\x03\x12\x03\x6d\x03\x2a\x03\x2a\x03\x7a\x03\x91\x03\x4e\x03\x4e\x03\x9e\x03\xb5\x03\x72\x03\x72\x03\x25\x01\x72\x03\xe5\xff\x72\x03\x04\x00\x72\x03\x4a\x01\x72\x03\x45\x01\x86\x03\x8a\x03\x1a\x01\x8a\x03\xe5\x03\xa2\x03\x00\x00\xa2\x03\xa2\x03\x45\x01\xa2\x03\x45\x01\xf8\x03\x09\x04\xc6\x03\xc6\x03\xf1\x03\xde\x03\x00\x00\xde\x03\x00\x00\x32\x04\xf6\x03\xe9\xff\xbb\x00\x05\x04\x0e\x04\x29\x01\x0e\x04\x0e\x04\x65\x04\x1f\x04\x31\x04\x78\x04\x35\x04\x00\x00\x35\x04\x35\x04\x63\x04\x99\x04\x4c\x04\x4c\x04\x7f\x04\x1b\x05\x68\x04\xaa\x04\x69\x04\x69\x04\x91\x04\x00\x00\xbb\x04\xbd\x04\x88\x04\x88\x04\x9b\x04\x1c\x05\x00\x00\xa9\x04\x45\x01\x00\x00\x00\x00\x45\x01\x04\x00\x45\x01\xc1\x04\x4a\x01\x00\x00\x0c\x01\x00\x00\x4a\x01\xb1\x04\x4a\x01\xb1\x04\x04\x00\x04\x00\xdd\x04\xab\x04\xb8\x04\x4a\x01\x4a\x01\x4a\x01\x4a\x01\xe9\x04\xfe\x04\x5b\x05\x4a\x01\x04\x00\x80\x00\xbe\x00\xbe\x00\x07\x01\xee\x04\xbe\x00\xbe\x00\xbe\x00\xbe\x00\x04\x00\x40\x00\x45\x01\x08\x05\x10\x05\xd8\x04\xd9\x04\x33\x05\x45\x01\x26\x05\xfb\x04\x47\x05\x00\x00\x07\x01\x45\x01\xfd\x04\x00\x00\xfd\x04\x45\x01\x45\x05\x0c\x05\x18\x05\x45\x01\x04\x00\x04\x00\x04\x00\x04\x00\x04\x00\x11\x05\x39\x05\x4c\x05\x04\x00\x04\x00\x2d\x05\x21\x05\x45\x01\x21\x05\x04\x00\x04\x00\x84\x05\x04\x00\x04\x00\x04\x00\x04\x00\x04\x00\x04\x00\x9b\x05\x00\x00\xa5\x05\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x42\x00\x04\x00\x45\x01\x00\x00\x00\x00\x00\x00\xce\x00\xce\x00\xce\x00\xce\x00\xce\x00\xce\x00\x00\x00\x4e\x05\xc3\x05\xc7\x05\xc8\x05\xc9\x05\xcf\x05\xca\x05\x00\x00\xce\x05\xda\x05\xe0\x05\xd7\x05\xd8\x05\x42\x00\xe2\x05\xf8\x05\x04\x00\x04\x00\x4a\x01\xfb\x05\xfc\x05\xfd\x05\xfe\x05\xb3\x05\xe3\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x45\x01\x00\x00\x00\x00\x45\x01\xe4\x05\x00\x00\x00\x00\x01\x06\x00\x00\x00\x00\x00\x00\x0b\x00\x07\x01\x00\x00\x0b\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4a\x01\xbc\x05\x00\x00\x66\x01\xe7\x00\x54\x01\xb7\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x01\x00\x00\x00\x00\x00\x00\x45\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\x05\x05\x06\x02\x06\x45\x01\x45\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x01\xbf\x05\xe8\x05\x00\x00\x00\x00\x00\x00\x00\x00\x4a\x01\x00\x00\xe7\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x06\x22\x00\x3e\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x05\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x05\x04\x00\x22\x00\xc2\x05\x00\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x06\x0f\x06\xd4\x05\x00\x00\x00\x00\x42\x00\x00\x00\xf1\x05\xcb\x05\xcc\x05\x00\x00\x45\x01\x00\x00\xb2\x04\xc1\x05\x13\x06\x00\x00\x11\x06\xf9\x05\x00\x00\x00\x00\x04\x00\x4a\x01\x45\x01\x00\x00\x04\x00\x00\x00\x04\x00\x17\x06\xd0\x05\xd1\x05\xd3\x04\xd2\x05\x1a\x06\xdc\x05\xd6\x05\xd5\x05\x00\x00\x04\x00\x4a\x01\x00\x00\x00\x00\x00\x05\xdb\x05\x1b\x06\x15\x05\xe5\x05\x1c\x06\x00\x00\x04\x00\xdd\x05\xea\x05\x04\x00\xde\x05\xeb\x05\xed\x05\xee\x05\x15\x05\x00\x00\xf0\x05\x04\x00\xec\x05\x04\x00\xf2\x05\x00\x00\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\x69\x00\x59\x00\x1e\x06\x20\x06\x7f\x00\x0b\x01\xef\x05\xba\x05\xd9\x05\xcd\x05\x22\x06\xe2\x00\x57\x00\xe3\x01\x18\x06\x16\x06\xc9\x01\xca\x00\x8f\x05\x85\x05\x14\x06\x19\x06\x1d\x06\x23\x02\x76\x05\xcd\x00\x26\x02\x0c\x00\x6f\x01\xaa\x02\x6b\x02\x4e\x04\x35\x01\x98\x02\xa8\x04\x5a\x04\xb9\x04\x06\x05\x38\x01\xa5\x00\x02\x00\xaa\x01\xb2\x00\xb9\x00\x0d\x00\x87\x01\x1a\x00\x78\x00\x05\x00\x35\x00\x86\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\x02\x45\x02\x32\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x04\x00\x00\x00\x00\x54\x05\x58\x05\xb4\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x56\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xed\x00\xb2\x01\x7a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcd\x01\x00\x00\x00\x00\xc7\x00\x71\x01\x33\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\x04\x34\x06\x7a\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x02\x00\x00\x93\x05\x00\x00\xd3\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x01\x00\x00\xda\x01\x00\x00\x00\x00\x00\x00\x00\x00\xb5\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x35\x06\x00\x00\xdf\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7c\x02\xe1\x05\x21\x01\x00\x00\x9f\x00\xbd\x00\x81\x02\x00\x00\x00\x00\x00\x00\x39\x06\x3d\x06\x00\x00\xd3\x05\x00\x00\x50\x05\xe2\x01\x00\x00\x00\x00\xc1\x01\xce\x02\xe8\x01\x00\x00\x8b\x05\x00\x00\x00\x00\x00\x00\x83\x05\x72\x02\x97\x05\x7b\x01\xda\x02\x86\x02\x00\x00\x00\x00\x00\x00\x99\x05\xab\x05\xaf\x05\xb5\x05\x00\x00\x26\x06\x00\x00\x5a\x05\xe6\x02\x6f\x04\x0a\x05\x0e\x05\xf1\x00\x00\x00\x1a\x05\x23\x05\x3b\x05\x3f\x05\x9e\x02\x35\x02\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xa2\x01\xb1\x00\x00\x00\x48\x00\xec\x01\x00\x00\x00\x00\x00\x00\xf1\x01\xf2\x02\xfe\x02\x0a\x03\x16\x03\x22\x03\x00\x00\x00\x00\x00\x00\x2e\x03\x3a\x03\x00\x00\xa3\x01\xfd\x01\xb0\x05\x46\x03\x52\x03\x00\x00\x5e\x03\x6a\x03\x76\x03\x82\x03\x8e\x03\x9a\x03\x27\x06\x00\x00\x00\x00\xc0\x04\xc9\x04\xd5\x04\xed\x04\xf6\x04\x02\x05\x7b\x04\xa6\x03\x03\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x87\x04\x00\x00\x00\x00\xb2\x03\xbe\x03\x8d\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x02\x00\x00\x00\x00\x12\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\x06\x00\x00\x00\x00\x21\x02\x25\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x02\xb2\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb9\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\x03\x8d\x00\x00\x00\x00\x00\xd6\x03\xe2\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x02\x00\x00\x00\x00\x24\x02\x00\x00\x00\x00\x31\x06\x00\x00\x00\x00\x00\x00\xee\x03\xbb\x05\x3a\x02\x00\x00\xfa\x03\x00\x00\x06\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x06\x00\x00\xbe\x05\x00\x00\x12\x04\xbd\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\x05\x00\x00\x38\x06\x00\x00\x1e\x04\x00\x00\x3a\x06\x2a\x04\x00\x00\x00\x00\x00\x00\x00\x00\xe9\x05\x00\x00\x00\x00\x36\x04\x00\x00\x42\x04\x00\x00\x00\x00\x00\x00\x00\x00"#

happyAdjustOffset :: Happy_GHC_Exts.Int# -> Happy_GHC_Exts.Int#
happyAdjustOffset off = off

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\xc7\xff\x00\x00\x00\x00\xc2\xff\xbf\xff\xb2\xff\xb2\xff\xb2\xff\xb2\xff\x00\x00\xb2\xff\x00\x00\xaf\xff\xac\xff\xaa\xff\x00\x00\x00\x00\x00\x00\xa4\xff\xa1\xff\x9f\xff\x9d\xff\x00\x00\x8a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7b\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\xff\x00\x00\x1f\xff\x00\x00\x00\x00\x00\x00\x00\x00\xcc\xff\x3b\xff\x39\xff\x3a\xff\x00\x00\x7c\xff\x76\xff\x6c\xff\x60\xff\x5c\xff\x59\xff\x3f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7b\xff\x00\x00\x3d\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4e\xff\x00\x00\x00\x00\x3e\xff\x00\x00\x00\x00\x3c\xff\x7b\xff\xcb\xff\xc9\xff\x00\x00\x1b\xff\x00\x00\x00\x00\xa1\xff\x1e\xff\x00\x00\x00\x00\x25\xff\x22\xff\x33\xff\x31\xff\x2c\xff\x00\x00\x00\x00\x00\x00\x1f\xff\x2b\xff\x27\xff\x2a\xff\x28\xff\x29\xff\x00\x00\x37\xff\x00\x00\xc7\xff\x23\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\xff\x8c\xff\x00\x00\x74\xff\x00\x00\x00\x00\x00\x00\x8a\xff\x00\x00\x91\xff\x00\x00\x00\x00\x00\x00\x90\xff\x8f\xff\x8a\xff\x00\x00\x00\x00\x7a\xff\x00\x00\x00\x00\x00\x00\x83\xff\x00\x00\x00\x00\x00\x00\x86\xff\x00\x00\x00\x00\x89\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xff\x00\x00\x00\x00\x00\x00\xa7\xff\x00\x00\xa8\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xae\xff\x00\x00\x00\x00\xb2\xff\x00\x00\xb3\xff\x00\x00\xb6\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc1\xff\x00\x00\xca\xff\x00\x00\x00\x00\x00\x00\xc6\xff\x00\x00\x00\x00\xbf\xff\xb2\xff\xc7\xff\x00\x00\xc2\xff\xc2\xff\xbf\xff\xb7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xff\xb1\xff\xaf\xff\x00\x00\xab\xff\xa9\xff\x00\x00\x00\x00\x00\x00\x00\x00\xa4\xff\xa0\xff\x9e\xff\x9c\xff\x8a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x7b\xff\x8c\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\xff\x00\x00\x00\x00\x00\x00\x6b\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7b\xff\x00\x00\x23\xff\x00\x00\x25\xff\x00\x00\x00\x00\x00\x00\x23\xff\x00\x00\x00\x00\x00\x00\x26\xff\x00\x00\x23\xff\x1f\xff\x20\xff\x00\x00\x00\x00\x39\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc7\xff\x00\x00\xaf\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9d\xff\x5a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\x00\x00\x19\xff\x81\xff\x78\xff\x6f\xff\x70\xff\x6e\xff\x71\xff\x72\xff\x6d\xff\x38\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\xff\x53\xff\x1c\xff\x1a\xff\x1d\xff\x21\xff\x32\xff\x24\xff\x2e\xff\x2d\xff\x00\x00\x00\x00\x2f\xff\x30\xff\x00\x00\x00\x00\x55\xff\x56\xff\x00\x00\x5d\xff\x5e\xff\x5f\xff\x61\xff\x00\x00\x69\xff\x62\xff\x63\xff\x6a\xff\x75\xff\x73\xff\x8b\xff\x00\x00\x00\x00\x94\xff\x00\x00\x00\x00\x00\x00\x00\x00\x95\xff\x96\xff\x79\xff\x84\xff\x82\xff\x87\xff\x85\xff\x88\xff\xa2\xff\x00\x00\x9a\xff\xa5\xff\xa6\xff\xb0\xff\xad\xff\xb4\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbe\xff\xc3\xff\xc0\xff\xc4\xff\xc5\xff\xc8\xff\xbb\xff\xba\xff\x00\x00\xaf\xff\x00\x00\x9b\xff\x8d\xff\x97\xff\x98\xff\x00\x00\x99\xff\x00\x00\x68\xff\x58\xff\x57\xff\x34\xff\x35\xff\x00\x00\x00\x00\x00\x00\x4d\xff\x47\xff\x46\xff\x5b\xff\x00\x00\x7e\xff\x7f\xff\x48\xff\x49\xff\x00\x00\x00\x00\x00\x00\x00\x00\x43\xff\x00\x00\x00\x00\x45\xff\x44\xff\x4f\xff\x50\xff\x51\xff\x66\xff\x00\x00\x00\x00\x00\x00\x41\xff\x7d\xff\x00\x00\x65\xff\x00\x00\x00\x00\x00\x00\x40\xff\x00\x00\x92\xff\x00\x00\xc7\xff\x00\x00\xb9\xff\xac\xff\x00\x00\x93\xff\x36\xff\x00\x00\x00\x00\x00\x00\x77\xff\x00\x00\x52\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\xff\x00\x00\xaf\xff\x4b\xff\x00\x00\x00\x00\x67\xff\x42\xff\x00\x00\x00\x00\x00\x00\xb2\xff\x00\x00\xac\xff\x4c\xff\x00\x00\x00\x00\xaa\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xff\xbd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4a\xff\xbc\xff"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\x03\x00\x00\x00\x01\x00\x39\x00\x03\x00\x01\x00\x03\x00\x0a\x00\x05\x00\x25\x00\x05\x00\x27\x00\x01\x00\x01\x00\x53\x00\x05\x00\x0b\x00\x02\x00\x03\x00\x39\x00\x11\x00\x0b\x00\x00\x00\x01\x00\x30\x00\x03\x00\x01\x00\x33\x00\x19\x00\x1a\x00\x1b\x00\x22\x00\x1d\x00\x1e\x00\x1f\x00\x2d\x00\x03\x00\x22\x00\x17\x00\x18\x00\x54\x00\x24\x00\x1f\x00\x1c\x00\x29\x00\x2c\x00\x24\x00\x20\x00\x21\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x33\x00\x34\x00\x34\x00\x36\x00\x56\x00\x38\x00\x30\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x2c\x00\x40\x00\x03\x00\x42\x00\x05\x00\x44\x00\x01\x00\x46\x00\x47\x00\x32\x00\x49\x00\x4a\x00\x05\x00\x2e\x00\x4d\x00\x2d\x00\x11\x00\x56\x00\x0b\x00\x52\x00\x53\x00\x01\x00\x55\x00\x01\x00\x19\x00\x1a\x00\x1b\x00\x05\x00\x1d\x00\x1e\x00\x1f\x00\x37\x00\x53\x00\x22\x00\x27\x00\x28\x00\x10\x00\x46\x00\x34\x00\x35\x00\x29\x00\x4a\x00\x04\x00\x24\x00\x06\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x52\x00\x53\x00\x34\x00\x55\x00\x36\x00\x01\x00\x38\x00\x01\x00\x34\x00\x35\x00\x3c\x00\x3d\x00\x3e\x00\x02\x00\x40\x00\x03\x00\x42\x00\x05\x00\x44\x00\x08\x00\x46\x00\x47\x00\x4c\x00\x49\x00\x4a\x00\x00\x00\x01\x00\x4d\x00\x03\x00\x11\x00\x52\x00\x53\x00\x52\x00\x53\x00\x06\x00\x55\x00\x08\x00\x19\x00\x1a\x00\x1b\x00\x03\x00\x1d\x00\x1e\x00\x1f\x00\x56\x00\x02\x00\x22\x00\x0a\x00\x53\x00\x00\x00\x01\x00\x08\x00\x03\x00\x29\x00\x32\x00\x33\x00\x32\x00\x33\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x01\x00\x09\x00\x25\x00\x36\x00\x27\x00\x38\x00\x2c\x00\x01\x00\x22\x00\x3c\x00\x3d\x00\x3e\x00\x02\x00\x40\x00\x03\x00\x42\x00\x05\x00\x44\x00\x08\x00\x46\x00\x47\x00\x01\x00\x49\x00\x4a\x00\x01\x00\x05\x00\x4d\x00\x01\x00\x3f\x00\x2b\x00\x2c\x00\x52\x00\x53\x00\x06\x00\x55\x00\x08\x00\x19\x00\x1a\x00\x1b\x00\x45\x00\x1d\x00\x1e\x00\x1f\x00\x14\x00\x15\x00\x2e\x00\x2f\x00\x30\x00\x32\x00\x33\x00\x0c\x00\x56\x00\x29\x00\x2f\x00\x30\x00\x1d\x00\x04\x00\x2e\x00\x2f\x00\x01\x00\x31\x00\x0e\x00\x0f\x00\x01\x00\x25\x00\x36\x00\x27\x00\x38\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x3d\x00\x3e\x00\x12\x00\x40\x00\x03\x00\x42\x00\x01\x00\x44\x00\x48\x00\x46\x00\x47\x00\x4b\x00\x49\x00\x4a\x00\x02\x00\x03\x00\x4d\x00\x25\x00\x3f\x00\x27\x00\x12\x00\x52\x00\x53\x00\x07\x00\x55\x00\x09\x00\x19\x00\x1a\x00\x1b\x00\x11\x00\x1d\x00\x1e\x00\x1f\x00\x2f\x00\x30\x00\x17\x00\x18\x00\x2f\x00\x30\x00\x01\x00\x1c\x00\x01\x00\x29\x00\x05\x00\x20\x00\x21\x00\x22\x00\x2e\x00\x2f\x00\x07\x00\x31\x00\x14\x00\x2f\x00\x30\x00\x25\x00\x36\x00\x27\x00\x38\x00\x00\x00\x01\x00\x53\x00\x00\x00\x01\x00\x3e\x00\x03\x00\x40\x00\x0c\x00\x42\x00\x25\x00\x44\x00\x27\x00\x46\x00\x47\x00\x52\x00\x49\x00\x4a\x00\x02\x00\x03\x00\x4d\x00\x25\x00\x0e\x00\x27\x00\x03\x00\x52\x00\x53\x00\x1b\x00\x55\x00\x2f\x00\x30\x00\x4d\x00\x2c\x00\x11\x00\x56\x00\x04\x00\x24\x00\x53\x00\x11\x00\x17\x00\x18\x00\x2c\x00\x0d\x00\x37\x00\x1c\x00\x2a\x00\x2b\x00\x2c\x00\x20\x00\x21\x00\x22\x00\x53\x00\x37\x00\x41\x00\x26\x00\x22\x00\x07\x00\x03\x00\x01\x00\x01\x00\x48\x00\x01\x00\x29\x00\x06\x00\x30\x00\x08\x00\x32\x00\x2e\x00\x25\x00\x48\x00\x27\x00\x01\x00\x0f\x00\x10\x00\x56\x00\x36\x00\x13\x00\x38\x00\x15\x00\x16\x00\x03\x00\x00\x00\x01\x00\x01\x00\x03\x00\x22\x00\x25\x00\x42\x00\x27\x00\x1f\x00\x20\x00\x46\x00\x01\x00\x4d\x00\x25\x00\x4a\x00\x27\x00\x51\x00\x4d\x00\x53\x00\x01\x00\x1f\x00\x20\x00\x52\x00\x53\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x01\x00\x34\x00\x35\x00\x21\x00\x05\x00\x23\x00\x03\x00\x01\x00\x26\x00\x3f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x4d\x00\x04\x00\x36\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x0e\x00\x0f\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x03\x00\x14\x00\x15\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x01\x00\x14\x00\x15\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x25\x00\x14\x00\x27\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x2c\x00\x04\x00\x03\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x10\x00\x11\x00\x37\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x03\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x03\x00\x48\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x25\x00\x22\x00\x27\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x56\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x22\x00\x05\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x03\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x00\x00\x01\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x01\x00\x2c\x00\x0c\x00\x1b\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x1d\x00\x1e\x00\x00\x00\x01\x00\x37\x00\x03\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x03\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x00\x00\x01\x00\x48\x00\x03\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x03\x00\x12\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x03\x00\x03\x00\x56\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x00\x00\x01\x00\x03\x00\x03\x00\x2a\x00\x2b\x00\x2c\x00\x25\x00\x01\x00\x27\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x07\x00\x07\x00\x09\x00\x00\x00\x01\x00\x07\x00\x03\x00\x09\x00\x03\x00\x21\x00\x22\x00\x23\x00\x1d\x00\x1e\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x56\x00\x21\x00\x22\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x22\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x1b\x00\x0c\x00\x07\x00\x00\x00\x01\x00\x07\x00\x03\x00\x56\x00\x06\x00\x24\x00\x25\x00\x56\x00\x21\x00\x22\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x53\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x03\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x53\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x0e\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x53\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x03\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x03\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x03\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x03\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x12\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x12\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x4e\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x0c\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x07\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x37\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x0e\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x53\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x21\x00\x56\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x23\x00\x03\x00\x0e\x00\x26\x00\x56\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x4c\x00\x03\x00\x07\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x23\x00\x03\x00\x56\x00\x26\x00\x2a\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x23\x00\x03\x00\x07\x00\x26\x00\x56\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x23\x00\x03\x00\x2d\x00\x26\x00\x1b\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x04\x00\x03\x00\x0e\x00\x00\x00\x01\x00\x53\x00\x03\x00\x54\x00\x2d\x00\x23\x00\x00\x00\x01\x00\x26\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x30\x00\x03\x00\x12\x00\x26\x00\x12\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x25\x00\x03\x00\x27\x00\x26\x00\x53\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x25\x00\x14\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x12\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x25\x00\x03\x00\x27\x00\x50\x00\x53\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x53\x00\x03\x00\x00\x00\x01\x00\x50\x00\x03\x00\x00\x00\x01\x00\x23\x00\x03\x00\x00\x00\x01\x00\x12\x00\x03\x00\x0a\x00\x25\x00\x14\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x0c\x00\x03\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x25\x00\x03\x00\x27\x00\x50\x00\x50\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x0a\x00\x03\x00\x00\x00\x01\x00\x2c\x00\x03\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2c\x00\x2c\x00\x23\x00\x4f\x00\x04\x00\x37\x00\x2a\x00\x2b\x00\x2c\x00\x53\x00\x01\x00\x37\x00\x37\x00\x00\x00\x01\x00\x41\x00\x12\x00\x00\x00\x01\x00\x00\x00\x01\x00\x50\x00\x48\x00\x4d\x00\x04\x00\x10\x00\x11\x00\x07\x00\x48\x00\x48\x00\x2a\x00\x2b\x00\x2c\x00\x50\x00\x2a\x00\x2b\x00\x2c\x00\x00\x00\x01\x00\x35\x00\x1b\x00\x43\x00\x56\x00\x56\x00\x1b\x00\x53\x00\x1b\x00\x00\x00\x01\x00\x24\x00\x25\x00\x00\x00\x01\x00\x24\x00\x25\x00\x24\x00\x25\x00\x25\x00\x35\x00\x27\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1b\x00\x1c\x00\x00\x00\x01\x00\x1b\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x01\x00\x16\x00\x17\x00\x4f\x00\x1b\x00\x1c\x00\x1b\x00\x16\x00\x17\x00\x16\x00\x17\x00\x16\x00\x1b\x00\x23\x00\x1b\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x12\x00\x1b\x00\x00\x00\x01\x00\x01\x00\x1b\x00\x01\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x10\x00\x11\x00\x10\x00\x11\x00\x0a\x00\x0b\x00\x1b\x00\x04\x00\x0e\x00\x0f\x00\x1b\x00\x04\x00\x04\x00\x04\x00\x10\x00\x11\x00\x1b\x00\x07\x00\x1b\x00\x04\x00\x1b\x00\x07\x00\x1b\x00\x0a\x00\x1b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x0a\x00\x04\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x0a\x00\x04\x00\x0c\x00\x04\x00\x0e\x00\x0f\x00\x0a\x00\x0b\x00\x0a\x00\x0b\x00\x0e\x00\x0f\x00\x0e\x00\x0f\x00\x0a\x00\x0b\x00\x0a\x00\x0b\x00\x0e\x00\x0f\x00\x0e\x00\x0f\x00\x0a\x00\x23\x00\x23\x00\x04\x00\x0e\x00\x0f\x00\x04\x00\x04\x00\x04\x00\x04\x00\x50\x00\x04\x00\x04\x00\x23\x00\x23\x00\x03\x00\x53\x00\x22\x00\x4f\x00\x09\x00\x07\x00\x0c\x00\x4d\x00\x50\x00\x2b\x00\x53\x00\x04\x00\x53\x00\x41\x00\x25\x00\x04\x00\x4d\x00\x4d\x00\x09\x00\x04\x00\x23\x00\x03\x00\x4d\x00\x04\x00\x50\x00\x45\x00\x50\x00\x4d\x00\x06\x00\x09\x00\x41\x00\x07\x00\x53\x00\x13\x00\x12\x00\x50\x00\x18\x00\x50\x00\x50\x00\x45\x00\x0e\x00\x41\x00\x19\x00\x01\x00\x01\x00\x01\x00\x01\x00\x1a\x00\x4d\x00\x4c\x00\x01\x00\x4d\x00\x50\x00\x18\x00\x01\x00\x19\x00\x01\x00\x1a\x00\x50\x00\x12\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\x12\x00\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\x12\x01\x35\x00\x36\x00\xd8\x00\x37\x00\x63\x00\x42\x00\x13\x01\x43\x00\xf1\x00\x0f\x01\xf2\x00\xa0\x00\x6b\x00\x62\x00\x0f\x01\x10\x01\x72\x00\x73\x00\xd8\x00\x44\x00\x10\x01\x35\x00\x36\x00\xe7\x00\x37\x00\x67\x00\xe8\x00\x45\x00\x46\x00\x47\x00\x14\x01\x48\x00\x49\x00\x4a\x00\xd2\x00\x42\x00\x4b\x00\x75\x00\x76\x00\xd5\x00\x11\x01\xa3\x00\x77\x00\x4c\x00\x83\x00\x11\x01\x78\x00\x79\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x63\x00\x51\x00\x52\x00\x66\x00\x53\x00\xff\xff\x54\x00\x7f\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\xe3\x01\x5a\x00\x42\x00\x5b\x00\x43\x00\x5c\x00\x63\x00\x5d\x00\x5e\x00\x6a\x00\x5f\x00\x60\x00\x0f\x01\x4d\x00\x61\x00\xd2\x00\x44\x00\xff\xff\x10\x01\x35\x00\x62\x00\xbd\x00\x63\x00\xd8\x00\x45\x00\x46\x00\x47\x00\xd9\x00\x48\x00\x49\x00\x4a\x00\xc4\x00\x62\x00\x4b\x00\xe1\x01\xe2\x01\xc0\x00\x5d\x00\x64\x00\x65\x00\x4c\x00\x60\x00\xda\x00\x11\x01\xdb\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x35\x00\x62\x00\x52\x00\x63\x00\x53\x00\x67\x00\x54\x00\x67\x00\x64\x00\x71\x01\x57\x00\x58\x00\x59\x00\xd2\x00\x5a\x00\x42\x00\x5b\x00\x43\x00\x5c\x00\xd3\x00\x5d\x00\x5e\x00\xe3\x01\x5f\x00\x60\x00\x35\x00\x36\x00\x61\x00\x37\x00\x44\x00\x35\x00\x62\x00\x35\x00\x62\x00\x0a\x01\x63\x00\x0b\x01\x45\x00\x46\x00\x47\x00\x12\x01\x48\x00\x49\x00\x4a\x00\xff\xff\xd2\x00\x4b\x00\x13\x01\x62\x00\x35\x00\x36\x00\xab\x01\x37\x00\x4c\x00\x68\x00\x69\x00\x68\x00\x1b\x01\x4d\x00\x4e\x00\x4f\x00\x50\x00\x67\x00\x6b\x00\xbd\x00\x0c\x01\x53\x00\x0d\x01\x54\x00\xdc\x01\x6b\x00\x14\x01\x57\x00\x58\x00\x59\x00\xd2\x00\x5a\x00\x42\x00\x5b\x00\x43\x00\x5c\x00\xaa\x01\x5d\x00\x5e\x00\xd8\x00\x5f\x00\x60\x00\x6b\x00\x18\x01\x61\x00\xa4\x00\x0e\x01\x84\x00\x3f\x00\x35\x00\x62\x00\x0a\x01\x63\x00\x0b\x01\x45\x00\x46\x00\x47\x00\xbb\x00\x48\x00\x49\x00\x4a\x00\xb5\x00\xb6\x00\x81\x00\x6e\x00\x6f\x00\x68\x00\x72\x01\xb1\x00\xff\xff\x4c\x00\x80\x00\x6f\x00\xa7\x00\xb8\x01\x4d\x00\x4e\x00\x6b\x00\x50\x00\xc1\x00\xc2\x00\x6b\x00\x0c\x01\x53\x00\x0d\x01\x54\x00\xb7\x00\x6d\x00\x6e\x00\x6f\x00\x58\x00\x59\x00\xaf\x00\x5a\x00\x42\x00\x5b\x00\x6b\x00\x5c\x00\xe5\x00\x5d\x00\x5e\x00\xe6\x00\x5f\x00\x60\x00\x72\x00\x73\x00\x61\x00\xf1\x00\x0e\x01\xf2\x00\xad\x00\x35\x00\x62\x00\xcf\x00\x63\x00\xd0\x00\x45\x00\x46\x00\x47\x00\x74\x00\x48\x00\x49\x00\x4a\x00\x1d\x01\x6f\x00\x75\x00\x76\x00\x86\x01\x6f\x00\xd8\x00\x77\x00\x6b\x00\x4c\x00\xad\x01\x78\x00\x79\x00\x7a\x00\x4d\x00\x4e\x00\xf7\x00\x50\x00\xf0\x00\x74\x01\x6f\x00\xf1\x00\x53\x00\xf2\x00\x54\x00\x8b\x00\x8c\x00\x62\x00\x35\x00\x36\x00\x59\x00\x37\x00\x5a\x00\x4b\x01\x5b\x00\xf1\x00\x5c\x00\xf2\x00\x5d\x00\x5e\x00\x35\x00\x5f\x00\x60\x00\x72\x00\x73\x00\x61\x00\xf1\x00\x4a\x01\xf2\x00\x91\x00\x35\x00\x62\x00\x8d\x00\x63\x00\xbb\x01\x6f\x00\x7e\x00\xca\x00\x74\x00\xff\xff\xb7\x01\x9b\x00\x62\x00\x92\x00\x75\x00\x76\x00\xca\x00\x49\x01\xc4\x00\x77\x00\x85\x00\x3e\x00\x3f\x00\x78\x00\x79\x00\x7a\x00\x62\x00\xc4\x00\xb8\xff\x7b\x00\x93\x00\xb9\x01\x3f\x01\x43\x01\xa0\x00\xcb\x00\x15\x01\x94\x00\x0a\x01\x7c\x00\x0b\x01\x7d\x00\x95\x00\xf1\x00\xcb\x00\xf2\x00\xa0\x00\x44\x01\x45\x01\xb8\xff\x96\x00\x46\x01\x97\x00\x47\x01\x48\x01\x3e\x01\x35\x00\x36\x00\x6b\x00\x37\x00\x35\x01\xf1\x00\x98\x00\xf2\x00\xa1\x00\xa2\x00\x99\x00\x6b\x00\x7e\x00\x0c\x01\x9a\x00\x0d\x01\x7f\x00\x9b\x00\x62\x00\x6b\x00\xa1\x00\x98\x01\x35\x00\x62\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x16\x01\x6b\x00\xd8\x00\x64\x00\x17\x01\x38\x00\x61\x01\x39\x00\x3d\x01\x6b\x00\x3a\x00\x0e\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x6b\x00\x29\x01\xb6\x01\x40\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x7d\x01\x6b\x00\xc1\x00\xe9\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x78\x01\x6b\x00\x3c\x01\xb5\x00\xed\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x73\x01\x6b\x00\xb5\x00\xa0\x01\x82\x00\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xf1\x00\xb8\x00\xf2\x00\x1c\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xbd\x00\xb7\x00\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xca\x00\xe6\x01\x3b\x01\x6b\x00\xb7\x00\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xbe\x00\xbf\x00\xc4\x00\xb7\x00\x6d\x00\x6e\x00\x6f\x00\x1a\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x3a\x01\xf3\x00\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x38\x01\xcb\x00\xec\x00\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xf1\x00\x34\x01\xf2\x00\xa1\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xb8\xff\x9e\x01\x6d\x00\x6e\x00\x6f\x00\x70\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x6d\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x8b\x00\x8c\x00\xd8\x00\x6b\x00\xa4\x00\x28\x01\xeb\x01\x60\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x37\x01\x4b\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\x7e\x01\x7f\x01\xbf\x01\x6d\x00\x6e\x00\x6f\x00\x6b\x00\xca\x00\x24\x01\xaa\x00\xbe\x01\x6d\x00\x6e\x00\x6f\x00\xa5\x00\xa6\x00\x35\x00\x36\x00\xc4\x00\x37\x00\xb4\x01\x6d\x00\x6e\x00\x6f\x00\x36\x01\xb0\x01\x6d\x00\x6e\x00\x6f\x00\xaf\x01\x6d\x00\x6e\x00\x6f\x00\x35\x00\x24\x01\xcb\x00\x37\x00\xe9\x01\x6d\x00\x6e\x00\x6f\x00\x32\x01\x08\x01\xed\x01\x6d\x00\x6e\x00\x6f\x00\x31\x01\x2d\x01\xb5\xff\xf7\x01\x6d\x00\x6e\x00\x6f\x00\x35\x00\x36\x00\x2c\x01\x37\x00\x40\x01\x3e\x00\x3f\x00\xf1\x00\xa4\x00\xf2\x00\xa1\x00\x25\x01\x9d\x00\x26\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xcf\x00\x23\x01\xdc\x00\x35\x00\x36\x00\xcf\x00\x37\x00\xa9\x01\x2b\x01\x9d\x00\x9e\x00\x39\x00\xa5\x00\x9a\x01\x3a\x00\x2a\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x8b\x00\x8c\x00\xff\xff\x9d\x00\x38\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x9d\x00\x96\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x8d\x00\xb1\x00\x21\x01\x35\x00\x36\x00\x20\x01\x37\x00\xff\xff\x1f\x01\x8e\x00\x8f\x00\xff\xff\x9d\x00\x80\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x9f\x00\x62\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x41\x01\x1a\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xf5\x00\x62\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x9f\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x97\x01\x09\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x8a\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x6c\x01\x07\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x6b\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x6a\x01\x62\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x69\x01\x03\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x68\x01\x02\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x64\x01\x01\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x63\x01\x00\x01\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x5e\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x5d\x01\xfc\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x5b\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x5a\x01\xfb\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x59\x01\xfa\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x58\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x57\x01\xf9\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x56\x01\xf8\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x4c\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xc9\x01\xf3\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xc8\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xdd\x01\xef\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xda\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xd9\x01\xec\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xf9\x01\xeb\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xf6\x01\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\xf5\x01\xc4\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x04\x02\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x0b\x02\xe9\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x0e\x02\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x16\x02\x62\x00\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x18\x02\xff\xff\x39\x00\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x9c\x00\x37\x00\xe2\x00\x3a\x00\xff\xff\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xe1\x00\x37\x00\xe0\x00\x88\x00\x89\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x32\x01\x37\x00\xff\xff\x3a\x00\xdf\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x8b\x00\x8c\x00\x88\x00\x89\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x4d\x01\x37\x00\xde\x00\x3a\x00\xff\xff\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xcc\x01\x37\x00\xd2\x00\x3a\x00\x05\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xed\x01\x37\x00\xad\x01\x35\x00\x36\x00\x62\x00\x37\x00\xd5\x00\xd2\x00\xf1\x01\x35\x00\x36\x00\x3a\x00\x37\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xa5\x01\x37\x00\xa9\x01\x8a\x00\xa8\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xf1\x00\x37\x00\xf2\x00\x2d\x01\x62\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x87\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x9e\x01\x00\x02\x53\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xf9\x00\x37\x00\x52\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xf1\x00\x37\x00\xf2\x00\x96\x01\x62\x00\x51\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x62\x00\x37\x00\x35\x00\x36\x00\x95\x01\x37\x00\x35\x00\x36\x00\x90\x01\x37\x00\x35\x00\x36\x00\xaf\x00\x37\x00\x7d\x01\x86\x01\x0b\x02\x50\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x24\x01\x37\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\xf1\x00\x37\x00\xf2\x00\x7c\x01\x7b\x01\x4e\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x86\x00\x3d\x00\x3e\x00\x3f\x00\x88\x01\x3d\x00\x3e\x00\x3f\x00\x87\x01\x3d\x00\x3e\x00\x3f\x00\x35\x00\x36\x00\x7a\x01\x37\x00\x35\x00\x36\x00\xca\x00\x37\x00\x84\x01\x3d\x00\x3e\x00\x3f\x00\xca\x00\xca\x00\x78\x01\x77\x01\x76\x01\xc4\x00\x83\x01\x3e\x00\x3f\x00\x62\x00\xbd\x00\xc4\x00\xc4\x00\x8b\x00\x8c\x00\xb8\xff\xfb\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\x70\x01\xcb\x00\x68\x01\x8d\x01\xbe\x00\xa2\x01\x8e\x01\xcb\x00\xcb\x00\x82\x01\x3e\x00\x3f\x00\x6f\x01\x81\x01\x3e\x00\x3f\x00\x8b\x00\xfc\x00\x67\x01\x8d\x00\x63\x01\xb8\xff\xb5\xff\x8d\x00\x62\x00\x8d\x00\x8b\x00\x8c\x00\x8e\x00\x2f\x01\x8b\x00\x8c\x00\x8e\x00\x2e\x01\x8e\x00\x8b\x01\xf1\x00\x66\x01\xf2\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\xa8\x00\xfd\x00\xa5\x00\xfe\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\xa8\x00\xa9\x00\x8b\x00\x8c\x00\xa8\x00\x03\x01\x8b\x00\x8c\x00\x8b\x00\x8c\x00\xb1\x00\xb2\x00\xd9\x01\xa8\x00\x9b\x01\xb3\x00\xb1\x00\x9c\x01\xb1\x00\xc7\x01\xb4\x00\xb3\x00\x5d\x01\xb3\x00\x55\x01\xb3\x00\x8b\x00\x8c\x00\xad\x00\xf4\x00\x8b\x00\x8c\x00\xbd\x00\x99\x01\xbd\x00\x93\x01\x8b\x00\x8c\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\x8b\x00\x8c\x00\xbd\x00\xbe\x00\x5f\x01\xbe\x00\xe8\x01\xcc\x00\xcd\x00\x92\x01\xd8\x01\xc1\x00\xc8\x00\x91\x01\xd7\x01\xd6\x01\xd5\x01\xbe\x00\x05\x02\x90\x01\xd3\x01\xba\x01\xd4\x01\xe6\x01\xd2\x01\xf8\x01\xc5\x00\x03\x02\xc6\x00\xc7\x00\xc1\x00\xc8\x00\xc5\x00\xd1\x01\xc6\x00\xa3\x01\xc1\x00\xc8\x00\xc5\x00\xd0\x01\xcb\x00\xcc\x01\xc1\x00\xc8\x00\xcc\x00\xe2\x00\xcc\x00\xae\x01\xc1\x00\xc8\x00\xc1\x00\xc8\x00\xcc\x00\x07\x02\xcc\x00\x14\x02\xc1\x00\xc8\x00\xc1\x00\xc8\x00\xce\x00\xcf\x01\xce\x01\xcb\x01\xc1\x00\xc8\x00\xc7\x01\xc6\x01\xc5\x01\xc4\x01\xc3\x01\xc1\x01\xbd\x01\xc2\x01\xbe\x01\xb3\x01\x62\x00\xe8\x01\xba\x01\xe5\x01\xf5\x01\xb2\x01\xdc\x01\xe0\x01\xdf\x01\x62\x00\xf4\x01\x62\x00\xf3\x01\xf1\x01\xeb\x01\xf0\x01\xef\x01\xbd\x00\x03\x02\xfb\x01\xfe\x01\x01\x02\x09\x02\x02\x02\xbb\x00\xff\x01\x07\x02\xd6\x00\xbd\x00\x0e\x02\xd5\x00\x62\x00\xb9\x00\xbb\x00\x0a\x02\xaf\x00\x11\x02\x14\x02\xbb\x00\xc4\x00\x18\x02\xad\x00\x3f\x01\x14\x01\x04\x01\xe3\x00\xab\x00\x13\x02\x12\x02\xa6\x01\x16\x02\x1a\x02\x21\x01\xa5\x01\x8e\x01\xb3\x01\x55\x01\x1b\x02\xfb\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x01\x0c\x02\x00\x00\x00\x00\x0f\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (51, 230) [
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230)
	]

happy_n_terms = 87 :: Prelude.Int
happy_n_nonterms = 55 :: Prelude.Int

happyReduce_51 = happySpecReduce_1  0# happyReduction_51
happyReduction_51 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (TI happy_var_1)) -> 
	happyIn54
		 ((read happy_var_1) :: Integer
	)}

happyReduce_52 = happySpecReduce_1  1# happyReduction_52
happyReduction_52 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_StellaIdent happy_var_1)) -> 
	happyIn55
		 (Stella.Abs.StellaIdent happy_var_1
	)}

happyReduce_53 = happySpecReduce_1  2# happyReduction_53
happyReduction_53 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_ExtensionName happy_var_1)) -> 
	happyIn56
		 (Stella.Abs.ExtensionName happy_var_1
	)}

happyReduce_54 = happySpecReduce_1  3# happyReduction_54
happyReduction_54 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_MemoryAddress happy_var_1)) -> 
	happyIn57
		 (Stella.Abs.MemoryAddress happy_var_1
	)}

happyReduce_55 = happySpecReduce_3  4# happyReduction_55
happyReduction_55 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut60 happy_x_1 of { (HappyWrap60 happy_var_1) -> 
	case happyOut63 happy_x_2 of { (HappyWrap63 happy_var_2) -> 
	case happyOut65 happy_x_3 of { (HappyWrap65 happy_var_3) -> 
	happyIn58
		 (Stella.Abs.AProgram happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_56 = happySpecReduce_0  5# happyReduction_56
happyReduction_56  =  happyIn59
		 ([]
	)

happyReduce_57 = happySpecReduce_1  5# happyReduction_57
happyReduction_57 happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	happyIn59
		 ((:[]) happy_var_1
	)}

happyReduce_58 = happySpecReduce_3  5# happyReduction_58
happyReduction_58 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut59 happy_x_3 of { (HappyWrap59 happy_var_3) -> 
	happyIn59
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_59 = happySpecReduce_3  6# happyReduction_59
happyReduction_59 happy_x_3
	happy_x_2
	happy_x_1
	 =  happyIn60
		 (Stella.Abs.LanguageCore
	)

happyReduce_60 = happySpecReduce_3  7# happyReduction_60
happyReduction_60 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut62 happy_x_3 of { (HappyWrap62 happy_var_3) -> 
	happyIn61
		 (Stella.Abs.AnExtension happy_var_3
	)}

happyReduce_61 = happySpecReduce_0  8# happyReduction_61
happyReduction_61  =  happyIn62
		 ([]
	)

happyReduce_62 = happySpecReduce_1  8# happyReduction_62
happyReduction_62 happy_x_1
	 =  case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	happyIn62
		 ((:[]) happy_var_1
	)}

happyReduce_63 = happySpecReduce_3  8# happyReduction_63
happyReduction_63 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	case happyOut62 happy_x_3 of { (HappyWrap62 happy_var_3) -> 
	happyIn62
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_64 = happySpecReduce_0  9# happyReduction_64
happyReduction_64  =  happyIn63
		 ([]
	)

happyReduce_65 = happySpecReduce_3  9# happyReduction_65
happyReduction_65 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut61 happy_x_1 of { (HappyWrap61 happy_var_1) -> 
	case happyOut63 happy_x_3 of { (HappyWrap63 happy_var_3) -> 
	happyIn63
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_66 = happyReduce 13# 10# happyReduction_66
happyReduction_66 (happy_x_13 `HappyStk`
	happy_x_12 `HappyStk`
	happy_x_11 `HappyStk`
	happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut69 happy_x_1 of { (HappyWrap69 happy_var_1) -> 
	case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	case happyOut71 happy_x_5 of { (HappyWrap71 happy_var_5) -> 
	case happyOut72 happy_x_7 of { (HappyWrap72 happy_var_7) -> 
	case happyOut73 happy_x_8 of { (HappyWrap73 happy_var_8) -> 
	case happyOut65 happy_x_10 of { (HappyWrap65 happy_var_10) -> 
	case happyOut87 happy_x_12 of { (HappyWrap87 happy_var_12) -> 
	happyIn64
		 (Stella.Abs.DeclFun happy_var_1 happy_var_3 happy_var_5 happy_var_7 happy_var_8 happy_var_10 happy_var_12
	) `HappyStk` happyRest}}}}}}}

happyReduce_67 = happyReduce 17# 10# happyReduction_67
happyReduction_67 (happy_x_17 `HappyStk`
	happy_x_16 `HappyStk`
	happy_x_15 `HappyStk`
	happy_x_14 `HappyStk`
	happy_x_13 `HappyStk`
	happy_x_12 `HappyStk`
	happy_x_11 `HappyStk`
	happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut69 happy_x_1 of { (HappyWrap69 happy_var_1) -> 
	case happyOut55 happy_x_4 of { (HappyWrap55 happy_var_4) -> 
	case happyOut59 happy_x_6 of { (HappyWrap59 happy_var_6) -> 
	case happyOut71 happy_x_9 of { (HappyWrap71 happy_var_9) -> 
	case happyOut72 happy_x_11 of { (HappyWrap72 happy_var_11) -> 
	case happyOut73 happy_x_12 of { (HappyWrap73 happy_var_12) -> 
	case happyOut65 happy_x_14 of { (HappyWrap65 happy_var_14) -> 
	case happyOut87 happy_x_16 of { (HappyWrap87 happy_var_16) -> 
	happyIn64
		 (Stella.Abs.DeclFunGeneric happy_var_1 happy_var_4 happy_var_6 happy_var_9 happy_var_11 happy_var_12 happy_var_14 happy_var_16
	) `HappyStk` happyRest}}}}}}}}

happyReduce_68 = happyReduce 4# 10# happyReduction_68
happyReduction_68 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	case happyOut99 happy_x_4 of { (HappyWrap99 happy_var_4) -> 
	happyIn64
		 (Stella.Abs.DeclTypeAlias happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_69 = happyReduce 4# 10# happyReduction_69
happyReduction_69 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut99 happy_x_4 of { (HappyWrap99 happy_var_4) -> 
	happyIn64
		 (Stella.Abs.DeclExceptionType happy_var_4
	) `HappyStk` happyRest}

happyReduce_70 = happyReduce 5# 10# happyReduction_70
happyReduction_70 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	case happyOut99 happy_x_5 of { (HappyWrap99 happy_var_5) -> 
	happyIn64
		 (Stella.Abs.DeclExceptionVariant happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_71 = happySpecReduce_0  11# happyReduction_71
happyReduction_71  =  happyIn65
		 ([]
	)

happyReduce_72 = happySpecReduce_2  11# happyReduction_72
happyReduction_72 happy_x_2
	happy_x_1
	 =  case happyOut64 happy_x_1 of { (HappyWrap64 happy_var_1) -> 
	case happyOut65 happy_x_2 of { (HappyWrap65 happy_var_2) -> 
	happyIn65
		 ((:) happy_var_1 happy_var_2
	)}}

happyReduce_73 = happySpecReduce_1  12# happyReduction_73
happyReduction_73 happy_x_1
	 =  case happyOut64 happy_x_1 of { (HappyWrap64 happy_var_1) -> 
	happyIn66
		 (Stella.Abs.ALocalDecl happy_var_1
	)}

happyReduce_74 = happySpecReduce_0  13# happyReduction_74
happyReduction_74  =  happyIn67
		 ([]
	)

happyReduce_75 = happySpecReduce_3  13# happyReduction_75
happyReduction_75 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut66 happy_x_1 of { (HappyWrap66 happy_var_1) -> 
	case happyOut67 happy_x_3 of { (HappyWrap67 happy_var_3) -> 
	happyIn67
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_76 = happySpecReduce_1  14# happyReduction_76
happyReduction_76 happy_x_1
	 =  happyIn68
		 (Stella.Abs.InlineAnnotation
	)

happyReduce_77 = happySpecReduce_0  15# happyReduction_77
happyReduction_77  =  happyIn69
		 ([]
	)

happyReduce_78 = happySpecReduce_2  15# happyReduction_78
happyReduction_78 happy_x_2
	happy_x_1
	 =  case happyOut68 happy_x_1 of { (HappyWrap68 happy_var_1) -> 
	case happyOut69 happy_x_2 of { (HappyWrap69 happy_var_2) -> 
	happyIn69
		 ((:) happy_var_1 happy_var_2
	)}}

happyReduce_79 = happySpecReduce_3  16# happyReduction_79
happyReduction_79 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	happyIn70
		 (Stella.Abs.AParamDecl happy_var_1 happy_var_3
	)}}

happyReduce_80 = happySpecReduce_0  17# happyReduction_80
happyReduction_80  =  happyIn71
		 ([]
	)

happyReduce_81 = happySpecReduce_1  17# happyReduction_81
happyReduction_81 happy_x_1
	 =  case happyOut70 happy_x_1 of { (HappyWrap70 happy_var_1) -> 
	happyIn71
		 ((:[]) happy_var_1
	)}

happyReduce_82 = happySpecReduce_3  17# happyReduction_82
happyReduction_82 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut70 happy_x_1 of { (HappyWrap70 happy_var_1) -> 
	case happyOut71 happy_x_3 of { (HappyWrap71 happy_var_3) -> 
	happyIn71
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_83 = happySpecReduce_0  18# happyReduction_83
happyReduction_83  =  happyIn72
		 (Stella.Abs.NoReturnType
	)

happyReduce_84 = happySpecReduce_2  18# happyReduction_84
happyReduction_84 happy_x_2
	happy_x_1
	 =  case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn72
		 (Stella.Abs.SomeReturnType happy_var_2
	)}

happyReduce_85 = happySpecReduce_0  19# happyReduction_85
happyReduction_85  =  happyIn73
		 (Stella.Abs.NoThrowType
	)

happyReduce_86 = happySpecReduce_2  19# happyReduction_86
happyReduction_86 happy_x_2
	happy_x_1
	 =  case happyOut75 happy_x_2 of { (HappyWrap75 happy_var_2) -> 
	happyIn73
		 (Stella.Abs.SomeThrowType happy_var_2
	)}

happyReduce_87 = happySpecReduce_1  20# happyReduction_87
happyReduction_87 happy_x_1
	 =  case happyOut99 happy_x_1 of { (HappyWrap99 happy_var_1) -> 
	happyIn74
		 (happy_var_1
	)}

happyReduce_88 = happySpecReduce_1  21# happyReduction_88
happyReduction_88 happy_x_1
	 =  case happyOut74 happy_x_1 of { (HappyWrap74 happy_var_1) -> 
	happyIn75
		 ((:[]) happy_var_1
	)}

happyReduce_89 = happySpecReduce_3  21# happyReduction_89
happyReduction_89 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut74 happy_x_1 of { (HappyWrap74 happy_var_1) -> 
	case happyOut75 happy_x_3 of { (HappyWrap75 happy_var_3) -> 
	happyIn75
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_90 = happySpecReduce_3  22# happyReduction_90
happyReduction_90 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn76
		 (Stella.Abs.AMatchCase happy_var_1 happy_var_3
	)}}

happyReduce_91 = happySpecReduce_0  23# happyReduction_91
happyReduction_91  =  happyIn77
		 ([]
	)

happyReduce_92 = happySpecReduce_1  23# happyReduction_92
happyReduction_92 happy_x_1
	 =  case happyOut76 happy_x_1 of { (HappyWrap76 happy_var_1) -> 
	happyIn77
		 ((:[]) happy_var_1
	)}

happyReduce_93 = happySpecReduce_3  23# happyReduction_93
happyReduction_93 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut76 happy_x_1 of { (HappyWrap76 happy_var_1) -> 
	case happyOut77 happy_x_3 of { (HappyWrap77 happy_var_3) -> 
	happyIn77
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_94 = happySpecReduce_0  24# happyReduction_94
happyReduction_94  =  happyIn78
		 (Stella.Abs.NoTyping
	)

happyReduce_95 = happySpecReduce_2  24# happyReduction_95
happyReduction_95 happy_x_2
	happy_x_1
	 =  case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn78
		 (Stella.Abs.SomeTyping happy_var_2
	)}

happyReduce_96 = happySpecReduce_0  25# happyReduction_96
happyReduction_96  =  happyIn79
		 (Stella.Abs.NoPatternData
	)

happyReduce_97 = happySpecReduce_2  25# happyReduction_97
happyReduction_97 happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_2 of { (HappyWrap81 happy_var_2) -> 
	happyIn79
		 (Stella.Abs.SomePatternData happy_var_2
	)}

happyReduce_98 = happySpecReduce_0  26# happyReduction_98
happyReduction_98  =  happyIn80
		 (Stella.Abs.NoExprData
	)

happyReduce_99 = happySpecReduce_2  26# happyReduction_99
happyReduction_99 happy_x_2
	happy_x_1
	 =  case happyOut87 happy_x_2 of { (HappyWrap87 happy_var_2) -> 
	happyIn80
		 (Stella.Abs.SomeExprData happy_var_2
	)}

happyReduce_100 = happyReduce 4# 27# happyReduction_100
happyReduction_100 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	case happyOut99 happy_x_4 of { (HappyWrap99 happy_var_4) -> 
	happyIn81
		 (Stella.Abs.PatternCastAs happy_var_1 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_101 = happySpecReduce_3  27# happyReduction_101
happyReduction_101 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	happyIn81
		 (Stella.Abs.PatternAsc happy_var_1 happy_var_3
	)}}

happyReduce_102 = happyReduce 4# 27# happyReduction_102
happyReduction_102 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	case happyOut79 happy_x_3 of { (HappyWrap79 happy_var_3) -> 
	happyIn81
		 (Stella.Abs.PatternVariant happy_var_2 happy_var_3
	) `HappyStk` happyRest}}

happyReduce_103 = happyReduce 4# 27# happyReduction_103
happyReduction_103 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_3 of { (HappyWrap81 happy_var_3) -> 
	happyIn81
		 (Stella.Abs.PatternInl happy_var_3
	) `HappyStk` happyRest}

happyReduce_104 = happyReduce 4# 27# happyReduction_104
happyReduction_104 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_3 of { (HappyWrap81 happy_var_3) -> 
	happyIn81
		 (Stella.Abs.PatternInr happy_var_3
	) `HappyStk` happyRest}

happyReduce_105 = happySpecReduce_3  27# happyReduction_105
happyReduction_105 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut82 happy_x_2 of { (HappyWrap82 happy_var_2) -> 
	happyIn81
		 (Stella.Abs.PatternTuple happy_var_2
	)}

happyReduce_106 = happySpecReduce_3  27# happyReduction_106
happyReduction_106 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut84 happy_x_2 of { (HappyWrap84 happy_var_2) -> 
	happyIn81
		 (Stella.Abs.PatternRecord happy_var_2
	)}

happyReduce_107 = happySpecReduce_3  27# happyReduction_107
happyReduction_107 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut82 happy_x_2 of { (HappyWrap82 happy_var_2) -> 
	happyIn81
		 (Stella.Abs.PatternList happy_var_2
	)}

happyReduce_108 = happyReduce 6# 27# happyReduction_108
happyReduction_108 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_3 of { (HappyWrap81 happy_var_3) -> 
	case happyOut81 happy_x_5 of { (HappyWrap81 happy_var_5) -> 
	happyIn81
		 (Stella.Abs.PatternCons happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_109 = happyReduce 5# 27# happyReduction_109
happyReduction_109 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_2 of { (HappyWrap81 happy_var_2) -> 
	case happyOut81 happy_x_4 of { (HappyWrap81 happy_var_4) -> 
	happyIn81
		 (Stella.Abs.patternCons happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_110 = happySpecReduce_1  27# happyReduction_110
happyReduction_110 happy_x_1
	 =  happyIn81
		 (Stella.Abs.PatternFalse
	)

happyReduce_111 = happySpecReduce_1  27# happyReduction_111
happyReduction_111 happy_x_1
	 =  happyIn81
		 (Stella.Abs.PatternTrue
	)

happyReduce_112 = happySpecReduce_1  27# happyReduction_112
happyReduction_112 happy_x_1
	 =  happyIn81
		 (Stella.Abs.PatternUnit
	)

happyReduce_113 = happySpecReduce_1  27# happyReduction_113
happyReduction_113 happy_x_1
	 =  case happyOut54 happy_x_1 of { (HappyWrap54 happy_var_1) -> 
	happyIn81
		 (Stella.Abs.PatternInt happy_var_1
	)}

happyReduce_114 = happyReduce 4# 27# happyReduction_114
happyReduction_114 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut81 happy_x_3 of { (HappyWrap81 happy_var_3) -> 
	happyIn81
		 (Stella.Abs.PatternSucc happy_var_3
	) `HappyStk` happyRest}

happyReduce_115 = happySpecReduce_1  27# happyReduction_115
happyReduction_115 happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	happyIn81
		 (Stella.Abs.PatternVar happy_var_1
	)}

happyReduce_116 = happySpecReduce_3  27# happyReduction_116
happyReduction_116 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_2 of { (HappyWrap81 happy_var_2) -> 
	happyIn81
		 (happy_var_2
	)}

happyReduce_117 = happySpecReduce_0  28# happyReduction_117
happyReduction_117  =  happyIn82
		 ([]
	)

happyReduce_118 = happySpecReduce_1  28# happyReduction_118
happyReduction_118 happy_x_1
	 =  case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	happyIn82
		 ((:[]) happy_var_1
	)}

happyReduce_119 = happySpecReduce_3  28# happyReduction_119
happyReduction_119 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	case happyOut82 happy_x_3 of { (HappyWrap82 happy_var_3) -> 
	happyIn82
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_120 = happySpecReduce_3  29# happyReduction_120
happyReduction_120 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut81 happy_x_3 of { (HappyWrap81 happy_var_3) -> 
	happyIn83
		 (Stella.Abs.ALabelledPattern happy_var_1 happy_var_3
	)}}

happyReduce_121 = happySpecReduce_1  30# happyReduction_121
happyReduction_121 happy_x_1
	 =  case happyOut83 happy_x_1 of { (HappyWrap83 happy_var_1) -> 
	happyIn84
		 ((:[]) happy_var_1
	)}

happyReduce_122 = happySpecReduce_3  30# happyReduction_122
happyReduction_122 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut83 happy_x_1 of { (HappyWrap83 happy_var_1) -> 
	case happyOut84 happy_x_3 of { (HappyWrap84 happy_var_3) -> 
	happyIn84
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_123 = happySpecReduce_3  31# happyReduction_123
happyReduction_123 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn85
		 (Stella.Abs.ABinding happy_var_1 happy_var_3
	)}}

happyReduce_124 = happySpecReduce_1  32# happyReduction_124
happyReduction_124 happy_x_1
	 =  case happyOut85 happy_x_1 of { (HappyWrap85 happy_var_1) -> 
	happyIn86
		 ((:[]) happy_var_1
	)}

happyReduce_125 = happySpecReduce_3  32# happyReduction_125
happyReduction_125 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut85 happy_x_1 of { (HappyWrap85 happy_var_1) -> 
	case happyOut86 happy_x_3 of { (HappyWrap86 happy_var_3) -> 
	happyIn86
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_126 = happySpecReduce_3  33# happyReduction_126
happyReduction_126 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut89 happy_x_1 of { (HappyWrap89 happy_var_1) -> 
	case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn87
		 (Stella.Abs.Sequence happy_var_1 happy_var_3
	)}}

happyReduce_127 = happySpecReduce_2  33# happyReduction_127
happyReduction_127 happy_x_2
	happy_x_1
	 =  case happyOut89 happy_x_1 of { (HappyWrap89 happy_var_1) -> 
	happyIn87
		 (happy_var_1
	)}

happyReduce_128 = happyReduce 4# 33# happyReduction_128
happyReduction_128 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut91 happy_x_2 of { (HappyWrap91 happy_var_2) -> 
	case happyOut87 happy_x_4 of { (HappyWrap87 happy_var_4) -> 
	happyIn87
		 (Stella.Abs.Let happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_129 = happyReduce 4# 33# happyReduction_129
happyReduction_129 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut91 happy_x_2 of { (HappyWrap91 happy_var_2) -> 
	case happyOut87 happy_x_4 of { (HappyWrap87 happy_var_4) -> 
	happyIn87
		 (Stella.Abs.LetRec happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_130 = happyReduce 5# 33# happyReduction_130
happyReduction_130 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut59 happy_x_3 of { (HappyWrap59 happy_var_3) -> 
	case happyOut87 happy_x_5 of { (HappyWrap87 happy_var_5) -> 
	happyIn87
		 (Stella.Abs.TypeAbstraction happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_131 = happySpecReduce_1  33# happyReduction_131
happyReduction_131 happy_x_1
	 =  case happyOut89 happy_x_1 of { (HappyWrap89 happy_var_1) -> 
	happyIn87
		 (happy_var_1
	)}

happyReduce_132 = happySpecReduce_0  34# happyReduction_132
happyReduction_132  =  happyIn88
		 ([]
	)

happyReduce_133 = happySpecReduce_1  34# happyReduction_133
happyReduction_133 happy_x_1
	 =  case happyOut87 happy_x_1 of { (HappyWrap87 happy_var_1) -> 
	happyIn88
		 ((:[]) happy_var_1
	)}

happyReduce_134 = happySpecReduce_3  34# happyReduction_134
happyReduction_134 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut87 happy_x_1 of { (HappyWrap87 happy_var_1) -> 
	case happyOut88 happy_x_3 of { (HappyWrap88 happy_var_3) -> 
	happyIn88
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_135 = happySpecReduce_3  35# happyReduction_135
happyReduction_135 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut92 happy_x_1 of { (HappyWrap92 happy_var_1) -> 
	case happyOut89 happy_x_3 of { (HappyWrap89 happy_var_3) -> 
	happyIn89
		 (Stella.Abs.Assign happy_var_1 happy_var_3
	)}}

happyReduce_136 = happyReduce 6# 35# happyReduction_136
happyReduction_136 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut89 happy_x_2 of { (HappyWrap89 happy_var_2) -> 
	case happyOut89 happy_x_4 of { (HappyWrap89 happy_var_4) -> 
	case happyOut89 happy_x_6 of { (HappyWrap89 happy_var_6) -> 
	happyIn89
		 (Stella.Abs.If happy_var_2 happy_var_4 happy_var_6
	) `HappyStk` happyRest}}}

happyReduce_137 = happySpecReduce_1  35# happyReduction_137
happyReduction_137 happy_x_1
	 =  case happyOut92 happy_x_1 of { (HappyWrap92 happy_var_1) -> 
	happyIn89
		 (happy_var_1
	)}

happyReduce_138 = happySpecReduce_3  36# happyReduction_138
happyReduction_138 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut81 happy_x_1 of { (HappyWrap81 happy_var_1) -> 
	case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn90
		 (Stella.Abs.APatternBinding happy_var_1 happy_var_3
	)}}

happyReduce_139 = happySpecReduce_1  37# happyReduction_139
happyReduction_139 happy_x_1
	 =  case happyOut90 happy_x_1 of { (HappyWrap90 happy_var_1) -> 
	happyIn91
		 ((:[]) happy_var_1
	)}

happyReduce_140 = happySpecReduce_3  37# happyReduction_140
happyReduction_140 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut90 happy_x_1 of { (HappyWrap90 happy_var_1) -> 
	case happyOut91 happy_x_3 of { (HappyWrap91 happy_var_3) -> 
	happyIn91
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_141 = happySpecReduce_3  38# happyReduction_141
happyReduction_141 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.LessThan happy_var_1 happy_var_3
	)}}

happyReduce_142 = happySpecReduce_3  38# happyReduction_142
happyReduction_142 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.LessThanOrEqual happy_var_1 happy_var_3
	)}}

happyReduce_143 = happySpecReduce_3  38# happyReduction_143
happyReduction_143 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.GreaterThan happy_var_1 happy_var_3
	)}}

happyReduce_144 = happySpecReduce_3  38# happyReduction_144
happyReduction_144 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.GreaterThanOrEqual happy_var_1 happy_var_3
	)}}

happyReduce_145 = happySpecReduce_3  38# happyReduction_145
happyReduction_145 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.Equal happy_var_1 happy_var_3
	)}}

happyReduce_146 = happySpecReduce_3  38# happyReduction_146
happyReduction_146 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut94 happy_x_3 of { (HappyWrap94 happy_var_3) -> 
	happyIn92
		 (Stella.Abs.NotEqual happy_var_1 happy_var_3
	)}}

happyReduce_147 = happySpecReduce_1  38# happyReduction_147
happyReduction_147 happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	happyIn92
		 (happy_var_1
	)}

happyReduce_148 = happySpecReduce_2  39# happyReduction_148
happyReduction_148 happy_x_2
	happy_x_1
	 =  case happyOut92 happy_x_1 of { (HappyWrap92 happy_var_1) -> 
	happyIn93
		 ((:[]) happy_var_1
	)}

happyReduce_149 = happySpecReduce_3  39# happyReduction_149
happyReduction_149 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut92 happy_x_1 of { (HappyWrap92 happy_var_1) -> 
	case happyOut93 happy_x_3 of { (HappyWrap93 happy_var_3) -> 
	happyIn93
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_150 = happySpecReduce_3  40# happyReduction_150
happyReduction_150 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut101 happy_x_3 of { (HappyWrap101 happy_var_3) -> 
	happyIn94
		 (Stella.Abs.TypeAsc happy_var_1 happy_var_3
	)}}

happyReduce_151 = happyReduce 4# 40# happyReduction_151
happyReduction_151 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut101 happy_x_4 of { (HappyWrap101 happy_var_4) -> 
	happyIn94
		 (Stella.Abs.TypeCast happy_var_1 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_152 = happyReduce 8# 40# happyReduction_152
happyReduction_152 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut71 happy_x_3 of { (HappyWrap71 happy_var_3) -> 
	case happyOut87 happy_x_7 of { (HappyWrap87 happy_var_7) -> 
	happyIn94
		 (Stella.Abs.Abstraction happy_var_3 happy_var_7
	) `HappyStk` happyRest}}

happyReduce_153 = happyReduce 4# 40# happyReduction_153
happyReduction_153 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	case happyOut80 happy_x_3 of { (HappyWrap80 happy_var_3) -> 
	happyIn94
		 (Stella.Abs.Variant happy_var_2 happy_var_3
	) `HappyStk` happyRest}}

happyReduce_154 = happyReduce 5# 40# happyReduction_154
happyReduction_154 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut92 happy_x_2 of { (HappyWrap92 happy_var_2) -> 
	case happyOut77 happy_x_4 of { (HappyWrap77 happy_var_4) -> 
	happyIn94
		 (Stella.Abs.Match happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_155 = happySpecReduce_3  40# happyReduction_155
happyReduction_155 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut88 happy_x_2 of { (HappyWrap88 happy_var_2) -> 
	happyIn94
		 (Stella.Abs.List happy_var_2
	)}

happyReduce_156 = happySpecReduce_3  40# happyReduction_156
happyReduction_156 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut95 happy_x_3 of { (HappyWrap95 happy_var_3) -> 
	happyIn94
		 (Stella.Abs.Add happy_var_1 happy_var_3
	)}}

happyReduce_157 = happySpecReduce_3  40# happyReduction_157
happyReduction_157 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut95 happy_x_3 of { (HappyWrap95 happy_var_3) -> 
	happyIn94
		 (Stella.Abs.Subtract happy_var_1 happy_var_3
	)}}

happyReduce_158 = happySpecReduce_3  40# happyReduction_158
happyReduction_158 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	case happyOut95 happy_x_3 of { (HappyWrap95 happy_var_3) -> 
	happyIn94
		 (Stella.Abs.LogicOr happy_var_1 happy_var_3
	)}}

happyReduce_159 = happySpecReduce_1  40# happyReduction_159
happyReduction_159 happy_x_1
	 =  case happyOut95 happy_x_1 of { (HappyWrap95 happy_var_1) -> 
	happyIn94
		 (happy_var_1
	)}

happyReduce_160 = happySpecReduce_3  41# happyReduction_160
happyReduction_160 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut95 happy_x_1 of { (HappyWrap95 happy_var_1) -> 
	case happyOut96 happy_x_3 of { (HappyWrap96 happy_var_3) -> 
	happyIn95
		 (Stella.Abs.Multiply happy_var_1 happy_var_3
	)}}

happyReduce_161 = happySpecReduce_3  41# happyReduction_161
happyReduction_161 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut95 happy_x_1 of { (HappyWrap95 happy_var_1) -> 
	case happyOut96 happy_x_3 of { (HappyWrap96 happy_var_3) -> 
	happyIn95
		 (Stella.Abs.Divide happy_var_1 happy_var_3
	)}}

happyReduce_162 = happySpecReduce_3  41# happyReduction_162
happyReduction_162 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut95 happy_x_1 of { (HappyWrap95 happy_var_1) -> 
	case happyOut96 happy_x_3 of { (HappyWrap96 happy_var_3) -> 
	happyIn95
		 (Stella.Abs.LogicAnd happy_var_1 happy_var_3
	)}}

happyReduce_163 = happySpecReduce_1  41# happyReduction_163
happyReduction_163 happy_x_1
	 =  case happyOut96 happy_x_1 of { (HappyWrap96 happy_var_1) -> 
	happyIn95
		 (happy_var_1
	)}

happyReduce_164 = happyReduce 4# 42# happyReduction_164
happyReduction_164 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn96
		 (Stella.Abs.Ref happy_var_3
	) `HappyStk` happyRest}

happyReduce_165 = happySpecReduce_2  42# happyReduction_165
happyReduction_165 happy_x_2
	happy_x_1
	 =  case happyOut96 happy_x_2 of { (HappyWrap96 happy_var_2) -> 
	happyIn96
		 (Stella.Abs.Deref happy_var_2
	)}

happyReduce_166 = happySpecReduce_1  42# happyReduction_166
happyReduction_166 happy_x_1
	 =  case happyOut97 happy_x_1 of { (HappyWrap97 happy_var_1) -> 
	happyIn96
		 (happy_var_1
	)}

happyReduce_167 = happyReduce 4# 43# happyReduction_167
happyReduction_167 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut97 happy_x_1 of { (HappyWrap97 happy_var_1) -> 
	case happyOut88 happy_x_3 of { (HappyWrap88 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Application happy_var_1 happy_var_3
	) `HappyStk` happyRest}}

happyReduce_168 = happyReduce 4# 43# happyReduction_168
happyReduction_168 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut97 happy_x_1 of { (HappyWrap97 happy_var_1) -> 
	case happyOut103 happy_x_3 of { (HappyWrap103 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.TypeApplication happy_var_1 happy_var_3
	) `HappyStk` happyRest}}

happyReduce_169 = happySpecReduce_3  43# happyReduction_169
happyReduction_169 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut97 happy_x_1 of { (HappyWrap97 happy_var_1) -> 
	case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.DotRecord happy_var_1 happy_var_3
	)}}

happyReduce_170 = happySpecReduce_3  43# happyReduction_170
happyReduction_170 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut97 happy_x_1 of { (HappyWrap97 happy_var_1) -> 
	case happyOut54 happy_x_3 of { (HappyWrap54 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.DotTuple happy_var_1 happy_var_3
	)}}

happyReduce_171 = happySpecReduce_3  43# happyReduction_171
happyReduction_171 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut88 happy_x_2 of { (HappyWrap88 happy_var_2) -> 
	happyIn97
		 (Stella.Abs.Tuple happy_var_2
	)}

happyReduce_172 = happySpecReduce_3  43# happyReduction_172
happyReduction_172 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut86 happy_x_2 of { (HappyWrap86 happy_var_2) -> 
	happyIn97
		 (Stella.Abs.Record happy_var_2
	)}

happyReduce_173 = happyReduce 6# 43# happyReduction_173
happyReduction_173 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	case happyOut87 happy_x_5 of { (HappyWrap87 happy_var_5) -> 
	happyIn97
		 (Stella.Abs.ConsList happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_174 = happyReduce 4# 43# happyReduction_174
happyReduction_174 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Head happy_var_3
	) `HappyStk` happyRest}

happyReduce_175 = happyReduce 4# 43# happyReduction_175
happyReduction_175 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.IsEmpty happy_var_3
	) `HappyStk` happyRest}

happyReduce_176 = happyReduce 4# 43# happyReduction_176
happyReduction_176 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Tail happy_var_3
	) `HappyStk` happyRest}

happyReduce_177 = happySpecReduce_1  43# happyReduction_177
happyReduction_177 happy_x_1
	 =  happyIn97
		 (Stella.Abs.Panic
	)

happyReduce_178 = happyReduce 4# 43# happyReduction_178
happyReduction_178 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Throw happy_var_3
	) `HappyStk` happyRest}

happyReduce_179 = happyReduce 10# 43# happyReduction_179
happyReduction_179 (happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	case happyOut81 happy_x_7 of { (HappyWrap81 happy_var_7) -> 
	case happyOut87 happy_x_9 of { (HappyWrap87 happy_var_9) -> 
	happyIn97
		 (Stella.Abs.TryCatch happy_var_3 happy_var_7 happy_var_9
	) `HappyStk` happyRest}}}

happyReduce_180 = happyReduce 8# 43# happyReduction_180
happyReduction_180 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	case happyOut87 happy_x_7 of { (HappyWrap87 happy_var_7) -> 
	happyIn97
		 (Stella.Abs.TryWith happy_var_3 happy_var_7
	) `HappyStk` happyRest}}

happyReduce_181 = happyReduce 16# 43# happyReduction_181
happyReduction_181 (happy_x_16 `HappyStk`
	happy_x_15 `HappyStk`
	happy_x_14 `HappyStk`
	happy_x_13 `HappyStk`
	happy_x_12 `HappyStk`
	happy_x_11 `HappyStk`
	happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	case happyOut99 happy_x_7 of { (HappyWrap99 happy_var_7) -> 
	case happyOut81 happy_x_9 of { (HappyWrap81 happy_var_9) -> 
	case happyOut87 happy_x_11 of { (HappyWrap87 happy_var_11) -> 
	case happyOut87 happy_x_15 of { (HappyWrap87 happy_var_15) -> 
	happyIn97
		 (Stella.Abs.TryCastAs happy_var_3 happy_var_7 happy_var_9 happy_var_11 happy_var_15
	) `HappyStk` happyRest}}}}}

happyReduce_182 = happyReduce 4# 43# happyReduction_182
happyReduction_182 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Inl happy_var_3
	) `HappyStk` happyRest}

happyReduce_183 = happyReduce 4# 43# happyReduction_183
happyReduction_183 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Inr happy_var_3
	) `HappyStk` happyRest}

happyReduce_184 = happyReduce 4# 43# happyReduction_184
happyReduction_184 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Succ happy_var_3
	) `HappyStk` happyRest}

happyReduce_185 = happyReduce 4# 43# happyReduction_185
happyReduction_185 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.LogicNot happy_var_3
	) `HappyStk` happyRest}

happyReduce_186 = happyReduce 4# 43# happyReduction_186
happyReduction_186 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Pred happy_var_3
	) `HappyStk` happyRest}

happyReduce_187 = happyReduce 4# 43# happyReduction_187
happyReduction_187 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.IsZero happy_var_3
	) `HappyStk` happyRest}

happyReduce_188 = happyReduce 4# 43# happyReduction_188
happyReduction_188 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn97
		 (Stella.Abs.Fix happy_var_3
	) `HappyStk` happyRest}

happyReduce_189 = happyReduce 8# 43# happyReduction_189
happyReduction_189 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	case happyOut87 happy_x_5 of { (HappyWrap87 happy_var_5) -> 
	case happyOut87 happy_x_7 of { (HappyWrap87 happy_var_7) -> 
	happyIn97
		 (Stella.Abs.NatRec happy_var_3 happy_var_5 happy_var_7
	) `HappyStk` happyRest}}}

happyReduce_190 = happyReduce 5# 43# happyReduction_190
happyReduction_190 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	case happyOut98 happy_x_5 of { (HappyWrap98 happy_var_5) -> 
	happyIn97
		 (Stella.Abs.Fold happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_191 = happyReduce 5# 43# happyReduction_191
happyReduction_191 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	case happyOut98 happy_x_5 of { (HappyWrap98 happy_var_5) -> 
	happyIn97
		 (Stella.Abs.Unfold happy_var_3 happy_var_5
	) `HappyStk` happyRest}}

happyReduce_192 = happySpecReduce_1  43# happyReduction_192
happyReduction_192 happy_x_1
	 =  case happyOut98 happy_x_1 of { (HappyWrap98 happy_var_1) -> 
	happyIn97
		 (happy_var_1
	)}

happyReduce_193 = happySpecReduce_1  44# happyReduction_193
happyReduction_193 happy_x_1
	 =  happyIn98
		 (Stella.Abs.ConstTrue
	)

happyReduce_194 = happySpecReduce_1  44# happyReduction_194
happyReduction_194 happy_x_1
	 =  happyIn98
		 (Stella.Abs.ConstFalse
	)

happyReduce_195 = happySpecReduce_1  44# happyReduction_195
happyReduction_195 happy_x_1
	 =  happyIn98
		 (Stella.Abs.ConstUnit
	)

happyReduce_196 = happySpecReduce_1  44# happyReduction_196
happyReduction_196 happy_x_1
	 =  case happyOut54 happy_x_1 of { (HappyWrap54 happy_var_1) -> 
	happyIn98
		 (Stella.Abs.ConstInt happy_var_1
	)}

happyReduce_197 = happySpecReduce_1  44# happyReduction_197
happyReduction_197 happy_x_1
	 =  case happyOut57 happy_x_1 of { (HappyWrap57 happy_var_1) -> 
	happyIn98
		 (Stella.Abs.ConstMemory happy_var_1
	)}

happyReduce_198 = happySpecReduce_1  44# happyReduction_198
happyReduction_198 happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	happyIn98
		 (Stella.Abs.Var happy_var_1
	)}

happyReduce_199 = happySpecReduce_3  44# happyReduction_199
happyReduction_199 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut87 happy_x_2 of { (HappyWrap87 happy_var_2) -> 
	happyIn98
		 (happy_var_2
	)}

happyReduce_200 = happySpecReduce_1  45# happyReduction_200
happyReduction_200 happy_x_1
	 =  happyIn99
		 (Stella.Abs.TypeAuto
	)

happyReduce_201 = happyReduce 6# 45# happyReduction_201
happyReduction_201 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut103 happy_x_3 of { (HappyWrap103 happy_var_3) -> 
	case happyOut99 happy_x_6 of { (HappyWrap99 happy_var_6) -> 
	happyIn99
		 (Stella.Abs.TypeFun happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_202 = happyReduce 4# 45# happyReduction_202
happyReduction_202 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut59 happy_x_2 of { (HappyWrap59 happy_var_2) -> 
	case happyOut99 happy_x_4 of { (HappyWrap99 happy_var_4) -> 
	happyIn99
		 (Stella.Abs.TypeForAll happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_203 = happyReduce 4# 45# happyReduction_203
happyReduction_203 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	case happyOut99 happy_x_4 of { (HappyWrap99 happy_var_4) -> 
	happyIn99
		 (Stella.Abs.TypeRec happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_204 = happySpecReduce_1  45# happyReduction_204
happyReduction_204 happy_x_1
	 =  case happyOut100 happy_x_1 of { (HappyWrap100 happy_var_1) -> 
	happyIn99
		 (happy_var_1
	)}

happyReduce_205 = happySpecReduce_3  46# happyReduction_205
happyReduction_205 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut101 happy_x_1 of { (HappyWrap101 happy_var_1) -> 
	case happyOut101 happy_x_3 of { (HappyWrap101 happy_var_3) -> 
	happyIn100
		 (Stella.Abs.TypeSum happy_var_1 happy_var_3
	)}}

happyReduce_206 = happySpecReduce_1  46# happyReduction_206
happyReduction_206 happy_x_1
	 =  case happyOut101 happy_x_1 of { (HappyWrap101 happy_var_1) -> 
	happyIn100
		 (happy_var_1
	)}

happyReduce_207 = happySpecReduce_3  47# happyReduction_207
happyReduction_207 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut103 happy_x_2 of { (HappyWrap103 happy_var_2) -> 
	happyIn101
		 (Stella.Abs.TypeTuple happy_var_2
	)}

happyReduce_208 = happySpecReduce_3  47# happyReduction_208
happyReduction_208 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut107 happy_x_2 of { (HappyWrap107 happy_var_2) -> 
	happyIn101
		 (Stella.Abs.TypeRecord happy_var_2
	)}

happyReduce_209 = happySpecReduce_3  47# happyReduction_209
happyReduction_209 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut105 happy_x_2 of { (HappyWrap105 happy_var_2) -> 
	happyIn101
		 (Stella.Abs.TypeVariant happy_var_2
	)}

happyReduce_210 = happySpecReduce_3  47# happyReduction_210
happyReduction_210 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn101
		 (Stella.Abs.TypeList happy_var_2
	)}

happyReduce_211 = happySpecReduce_1  47# happyReduction_211
happyReduction_211 happy_x_1
	 =  case happyOut102 happy_x_1 of { (HappyWrap102 happy_var_1) -> 
	happyIn101
		 (happy_var_1
	)}

happyReduce_212 = happySpecReduce_1  48# happyReduction_212
happyReduction_212 happy_x_1
	 =  happyIn102
		 (Stella.Abs.TypeBool
	)

happyReduce_213 = happySpecReduce_1  48# happyReduction_213
happyReduction_213 happy_x_1
	 =  happyIn102
		 (Stella.Abs.TypeNat
	)

happyReduce_214 = happySpecReduce_1  48# happyReduction_214
happyReduction_214 happy_x_1
	 =  happyIn102
		 (Stella.Abs.TypeUnit
	)

happyReduce_215 = happySpecReduce_1  48# happyReduction_215
happyReduction_215 happy_x_1
	 =  happyIn102
		 (Stella.Abs.TypeTop
	)

happyReduce_216 = happySpecReduce_1  48# happyReduction_216
happyReduction_216 happy_x_1
	 =  happyIn102
		 (Stella.Abs.TypeBottom
	)

happyReduce_217 = happySpecReduce_2  48# happyReduction_217
happyReduction_217 happy_x_2
	happy_x_1
	 =  case happyOut101 happy_x_2 of { (HappyWrap101 happy_var_2) -> 
	happyIn102
		 (Stella.Abs.TypeRef happy_var_2
	)}

happyReduce_218 = happySpecReduce_1  48# happyReduction_218
happyReduction_218 happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	happyIn102
		 (Stella.Abs.TypeVar happy_var_1
	)}

happyReduce_219 = happySpecReduce_3  48# happyReduction_219
happyReduction_219 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn102
		 (happy_var_2
	)}

happyReduce_220 = happySpecReduce_0  49# happyReduction_220
happyReduction_220  =  happyIn103
		 ([]
	)

happyReduce_221 = happySpecReduce_1  49# happyReduction_221
happyReduction_221 happy_x_1
	 =  case happyOut99 happy_x_1 of { (HappyWrap99 happy_var_1) -> 
	happyIn103
		 ((:[]) happy_var_1
	)}

happyReduce_222 = happySpecReduce_3  49# happyReduction_222
happyReduction_222 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut99 happy_x_1 of { (HappyWrap99 happy_var_1) -> 
	case happyOut103 happy_x_3 of { (HappyWrap103 happy_var_3) -> 
	happyIn103
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_223 = happySpecReduce_2  50# happyReduction_223
happyReduction_223 happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut78 happy_x_2 of { (HappyWrap78 happy_var_2) -> 
	happyIn104
		 (Stella.Abs.AVariantFieldType happy_var_1 happy_var_2
	)}}

happyReduce_224 = happySpecReduce_0  51# happyReduction_224
happyReduction_224  =  happyIn105
		 ([]
	)

happyReduce_225 = happySpecReduce_1  51# happyReduction_225
happyReduction_225 happy_x_1
	 =  case happyOut104 happy_x_1 of { (HappyWrap104 happy_var_1) -> 
	happyIn105
		 ((:[]) happy_var_1
	)}

happyReduce_226 = happySpecReduce_3  51# happyReduction_226
happyReduction_226 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut104 happy_x_1 of { (HappyWrap104 happy_var_1) -> 
	case happyOut105 happy_x_3 of { (HappyWrap105 happy_var_3) -> 
	happyIn105
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_227 = happySpecReduce_3  52# happyReduction_227
happyReduction_227 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut55 happy_x_1 of { (HappyWrap55 happy_var_1) -> 
	case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	happyIn106
		 (Stella.Abs.ARecordFieldType happy_var_1 happy_var_3
	)}}

happyReduce_228 = happySpecReduce_1  53# happyReduction_228
happyReduction_228 happy_x_1
	 =  case happyOut106 happy_x_1 of { (HappyWrap106 happy_var_1) -> 
	happyIn107
		 ((:[]) happy_var_1
	)}

happyReduce_229 = happySpecReduce_3  53# happyReduction_229
happyReduction_229 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut106 happy_x_1 of { (HappyWrap106 happy_var_1) -> 
	case happyOut107 happy_x_3 of { (HappyWrap107 happy_var_3) -> 
	happyIn107
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_230 = happySpecReduce_3  54# happyReduction_230
happyReduction_230 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut87 happy_x_1 of { (HappyWrap87 happy_var_1) -> 
	case happyOut99 happy_x_3 of { (HappyWrap99 happy_var_3) -> 
	happyIn108
		 (Stella.Abs.ATyping happy_var_1 happy_var_3
	)}}

happyNewToken action sts stk [] =
	happyDoAction 86# notHappyAtAll action sts stk []

happyNewToken action sts stk (tk:tks) =
	let cont i = happyDoAction i tk action sts stk tks in
	case tk of {
	PT _ (TS _ 1) -> cont 1#;
	PT _ (TS _ 2) -> cont 2#;
	PT _ (TS _ 3) -> cont 3#;
	PT _ (TS _ 4) -> cont 4#;
	PT _ (TS _ 5) -> cont 5#;
	PT _ (TS _ 6) -> cont 6#;
	PT _ (TS _ 7) -> cont 7#;
	PT _ (TS _ 8) -> cont 8#;
	PT _ (TS _ 9) -> cont 9#;
	PT _ (TS _ 10) -> cont 10#;
	PT _ (TS _ 11) -> cont 11#;
	PT _ (TS _ 12) -> cont 12#;
	PT _ (TS _ 13) -> cont 13#;
	PT _ (TS _ 14) -> cont 14#;
	PT _ (TS _ 15) -> cont 15#;
	PT _ (TS _ 16) -> cont 16#;
	PT _ (TS _ 17) -> cont 17#;
	PT _ (TS _ 18) -> cont 18#;
	PT _ (TS _ 19) -> cont 19#;
	PT _ (TS _ 20) -> cont 20#;
	PT _ (TS _ 21) -> cont 21#;
	PT _ (TS _ 22) -> cont 22#;
	PT _ (TS _ 23) -> cont 23#;
	PT _ (TS _ 24) -> cont 24#;
	PT _ (TS _ 25) -> cont 25#;
	PT _ (TS _ 26) -> cont 26#;
	PT _ (TS _ 27) -> cont 27#;
	PT _ (TS _ 28) -> cont 28#;
	PT _ (TS _ 29) -> cont 29#;
	PT _ (TS _ 30) -> cont 30#;
	PT _ (TS _ 31) -> cont 31#;
	PT _ (TS _ 32) -> cont 32#;
	PT _ (TS _ 33) -> cont 33#;
	PT _ (TS _ 34) -> cont 34#;
	PT _ (TS _ 35) -> cont 35#;
	PT _ (TS _ 36) -> cont 36#;
	PT _ (TS _ 37) -> cont 37#;
	PT _ (TS _ 38) -> cont 38#;
	PT _ (TS _ 39) -> cont 39#;
	PT _ (TS _ 40) -> cont 40#;
	PT _ (TS _ 41) -> cont 41#;
	PT _ (TS _ 42) -> cont 42#;
	PT _ (TS _ 43) -> cont 43#;
	PT _ (TS _ 44) -> cont 44#;
	PT _ (TS _ 45) -> cont 45#;
	PT _ (TS _ 46) -> cont 46#;
	PT _ (TS _ 47) -> cont 47#;
	PT _ (TS _ 48) -> cont 48#;
	PT _ (TS _ 49) -> cont 49#;
	PT _ (TS _ 50) -> cont 50#;
	PT _ (TS _ 51) -> cont 51#;
	PT _ (TS _ 52) -> cont 52#;
	PT _ (TS _ 53) -> cont 53#;
	PT _ (TS _ 54) -> cont 54#;
	PT _ (TS _ 55) -> cont 55#;
	PT _ (TS _ 56) -> cont 56#;
	PT _ (TS _ 57) -> cont 57#;
	PT _ (TS _ 58) -> cont 58#;
	PT _ (TS _ 59) -> cont 59#;
	PT _ (TS _ 60) -> cont 60#;
	PT _ (TS _ 61) -> cont 61#;
	PT _ (TS _ 62) -> cont 62#;
	PT _ (TS _ 63) -> cont 63#;
	PT _ (TS _ 64) -> cont 64#;
	PT _ (TS _ 65) -> cont 65#;
	PT _ (TS _ 66) -> cont 66#;
	PT _ (TS _ 67) -> cont 67#;
	PT _ (TS _ 68) -> cont 68#;
	PT _ (TS _ 69) -> cont 69#;
	PT _ (TS _ 70) -> cont 70#;
	PT _ (TS _ 71) -> cont 71#;
	PT _ (TS _ 72) -> cont 72#;
	PT _ (TS _ 73) -> cont 73#;
	PT _ (TS _ 74) -> cont 74#;
	PT _ (TS _ 75) -> cont 75#;
	PT _ (TS _ 76) -> cont 76#;
	PT _ (TS _ 77) -> cont 77#;
	PT _ (TS _ 78) -> cont 78#;
	PT _ (TS _ 79) -> cont 79#;
	PT _ (TS _ 80) -> cont 80#;
	PT _ (TS _ 81) -> cont 81#;
	PT _ (TI happy_dollar_dollar) -> cont 82#;
	PT _ (T_StellaIdent happy_dollar_dollar) -> cont 83#;
	PT _ (T_ExtensionName happy_dollar_dollar) -> cont 84#;
	PT _ (T_MemoryAddress happy_dollar_dollar) -> cont 85#;
	_ -> happyError' ((tk:tks), [])
	}

happyError_ explist 86# tk tks = happyError' (tks, explist)
happyError_ explist _ tk tks = happyError' ((tk:tks), explist)

happyThen :: () => Err a -> (a -> Err b) -> Err b
happyThen = ((>>=))
happyReturn :: () => a -> Err a
happyReturn = (return)
happyThen1 m k tks = ((>>=)) m (\a -> k a tks)
happyReturn1 :: () => a -> b -> Err a
happyReturn1 = \a tks -> (return) a
happyError' :: () => ([(Token)], [Prelude.String]) -> Err a
happyError' = (\(tokens, _) -> happyError tokens)
pProgram tks = happySomeParser where
 happySomeParser = happyThen (happyParse 0# tks) (\x -> happyReturn (let {(HappyWrap58 x') = happyOut58 x} in x'))

pListStellaIdent tks = happySomeParser where
 happySomeParser = happyThen (happyParse 1# tks) (\x -> happyReturn (let {(HappyWrap59 x') = happyOut59 x} in x'))

pLanguageDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 2# tks) (\x -> happyReturn (let {(HappyWrap60 x') = happyOut60 x} in x'))

pExtension tks = happySomeParser where
 happySomeParser = happyThen (happyParse 3# tks) (\x -> happyReturn (let {(HappyWrap61 x') = happyOut61 x} in x'))

pListExtensionName tks = happySomeParser where
 happySomeParser = happyThen (happyParse 4# tks) (\x -> happyReturn (let {(HappyWrap62 x') = happyOut62 x} in x'))

pListExtension tks = happySomeParser where
 happySomeParser = happyThen (happyParse 5# tks) (\x -> happyReturn (let {(HappyWrap63 x') = happyOut63 x} in x'))

pDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 6# tks) (\x -> happyReturn (let {(HappyWrap64 x') = happyOut64 x} in x'))

pListDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 7# tks) (\x -> happyReturn (let {(HappyWrap65 x') = happyOut65 x} in x'))

pLocalDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 8# tks) (\x -> happyReturn (let {(HappyWrap66 x') = happyOut66 x} in x'))

pListLocalDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 9# tks) (\x -> happyReturn (let {(HappyWrap67 x') = happyOut67 x} in x'))

pAnnotation tks = happySomeParser where
 happySomeParser = happyThen (happyParse 10# tks) (\x -> happyReturn (let {(HappyWrap68 x') = happyOut68 x} in x'))

pListAnnotation tks = happySomeParser where
 happySomeParser = happyThen (happyParse 11# tks) (\x -> happyReturn (let {(HappyWrap69 x') = happyOut69 x} in x'))

pParamDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 12# tks) (\x -> happyReturn (let {(HappyWrap70 x') = happyOut70 x} in x'))

pListParamDecl tks = happySomeParser where
 happySomeParser = happyThen (happyParse 13# tks) (\x -> happyReturn (let {(HappyWrap71 x') = happyOut71 x} in x'))

pReturnType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 14# tks) (\x -> happyReturn (let {(HappyWrap72 x') = happyOut72 x} in x'))

pThrowType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 15# tks) (\x -> happyReturn (let {(HappyWrap73 x') = happyOut73 x} in x'))

pType9 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 16# tks) (\x -> happyReturn (let {(HappyWrap74 x') = happyOut74 x} in x'))

pListType9 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 17# tks) (\x -> happyReturn (let {(HappyWrap75 x') = happyOut75 x} in x'))

pMatchCase tks = happySomeParser where
 happySomeParser = happyThen (happyParse 18# tks) (\x -> happyReturn (let {(HappyWrap76 x') = happyOut76 x} in x'))

pListMatchCase tks = happySomeParser where
 happySomeParser = happyThen (happyParse 19# tks) (\x -> happyReturn (let {(HappyWrap77 x') = happyOut77 x} in x'))

pOptionalTyping tks = happySomeParser where
 happySomeParser = happyThen (happyParse 20# tks) (\x -> happyReturn (let {(HappyWrap78 x') = happyOut78 x} in x'))

pPatternData tks = happySomeParser where
 happySomeParser = happyThen (happyParse 21# tks) (\x -> happyReturn (let {(HappyWrap79 x') = happyOut79 x} in x'))

pExprData tks = happySomeParser where
 happySomeParser = happyThen (happyParse 22# tks) (\x -> happyReturn (let {(HappyWrap80 x') = happyOut80 x} in x'))

pPattern tks = happySomeParser where
 happySomeParser = happyThen (happyParse 23# tks) (\x -> happyReturn (let {(HappyWrap81 x') = happyOut81 x} in x'))

pListPattern tks = happySomeParser where
 happySomeParser = happyThen (happyParse 24# tks) (\x -> happyReturn (let {(HappyWrap82 x') = happyOut82 x} in x'))

pLabelledPattern tks = happySomeParser where
 happySomeParser = happyThen (happyParse 25# tks) (\x -> happyReturn (let {(HappyWrap83 x') = happyOut83 x} in x'))

pListLabelledPattern tks = happySomeParser where
 happySomeParser = happyThen (happyParse 26# tks) (\x -> happyReturn (let {(HappyWrap84 x') = happyOut84 x} in x'))

pBinding tks = happySomeParser where
 happySomeParser = happyThen (happyParse 27# tks) (\x -> happyReturn (let {(HappyWrap85 x') = happyOut85 x} in x'))

pListBinding tks = happySomeParser where
 happySomeParser = happyThen (happyParse 28# tks) (\x -> happyReturn (let {(HappyWrap86 x') = happyOut86 x} in x'))

pExpr tks = happySomeParser where
 happySomeParser = happyThen (happyParse 29# tks) (\x -> happyReturn (let {(HappyWrap87 x') = happyOut87 x} in x'))

pListExpr tks = happySomeParser where
 happySomeParser = happyThen (happyParse 30# tks) (\x -> happyReturn (let {(HappyWrap88 x') = happyOut88 x} in x'))

pExpr1 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 31# tks) (\x -> happyReturn (let {(HappyWrap89 x') = happyOut89 x} in x'))

pPatternBinding tks = happySomeParser where
 happySomeParser = happyThen (happyParse 32# tks) (\x -> happyReturn (let {(HappyWrap90 x') = happyOut90 x} in x'))

pListPatternBinding tks = happySomeParser where
 happySomeParser = happyThen (happyParse 33# tks) (\x -> happyReturn (let {(HappyWrap91 x') = happyOut91 x} in x'))

pExpr2 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 34# tks) (\x -> happyReturn (let {(HappyWrap92 x') = happyOut92 x} in x'))

pListExpr2 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 35# tks) (\x -> happyReturn (let {(HappyWrap93 x') = happyOut93 x} in x'))

pExpr3 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 36# tks) (\x -> happyReturn (let {(HappyWrap94 x') = happyOut94 x} in x'))

pExpr4 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 37# tks) (\x -> happyReturn (let {(HappyWrap95 x') = happyOut95 x} in x'))

pExpr5 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 38# tks) (\x -> happyReturn (let {(HappyWrap96 x') = happyOut96 x} in x'))

pExpr6 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 39# tks) (\x -> happyReturn (let {(HappyWrap97 x') = happyOut97 x} in x'))

pExpr7 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 40# tks) (\x -> happyReturn (let {(HappyWrap98 x') = happyOut98 x} in x'))

pType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 41# tks) (\x -> happyReturn (let {(HappyWrap99 x') = happyOut99 x} in x'))

pType1 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 42# tks) (\x -> happyReturn (let {(HappyWrap100 x') = happyOut100 x} in x'))

pType2 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 43# tks) (\x -> happyReturn (let {(HappyWrap101 x') = happyOut101 x} in x'))

pType3 tks = happySomeParser where
 happySomeParser = happyThen (happyParse 44# tks) (\x -> happyReturn (let {(HappyWrap102 x') = happyOut102 x} in x'))

pListType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 45# tks) (\x -> happyReturn (let {(HappyWrap103 x') = happyOut103 x} in x'))

pVariantFieldType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 46# tks) (\x -> happyReturn (let {(HappyWrap104 x') = happyOut104 x} in x'))

pListVariantFieldType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 47# tks) (\x -> happyReturn (let {(HappyWrap105 x') = happyOut105 x} in x'))

pRecordFieldType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 48# tks) (\x -> happyReturn (let {(HappyWrap106 x') = happyOut106 x} in x'))

pListRecordFieldType tks = happySomeParser where
 happySomeParser = happyThen (happyParse 49# tks) (\x -> happyReturn (let {(HappyWrap107 x') = happyOut107 x} in x'))

pTyping tks = happySomeParser where
 happySomeParser = happyThen (happyParse 50# tks) (\x -> happyReturn (let {(HappyWrap108 x') = happyOut108 x} in x'))

happySeq = happyDontSeq


type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- $Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp $













-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.<# m)) :: Prelude.Bool)
#define GTE(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.>=# m)) :: Prelude.Bool)
#define EQ(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.==# m)) :: Prelude.Bool)
#else
#define LT(n,m) (n Happy_GHC_Exts.<# m)
#define GTE(n,m) (n Happy_GHC_Exts.>=# m)
#define EQ(n,m) (n Happy_GHC_Exts.==# m)
#endif



















data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList








































infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is ERROR_TOK, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
        (happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = {- nothing -}
          case action of
                0#           -> {- nothing -}
                                     happyFail (happyExpListPerState ((Happy_GHC_Exts.I# (st)) :: Prelude.Int)) i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}
                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}
                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off Happy_GHC_Exts.+# i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else Prelude.False
         action
          | check     = indexShortOffAddr happyTable off_i
          | Prelude.otherwise = indexShortOffAddr happyDefActions st




indexShortOffAddr (HappyA# arr) off =
        Happy_GHC_Exts.narrow16Int# i
  where
        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Happy_GHC_Exts.*# 2#




{-# INLINE happyLt #-}
happyLt x y = LT(x,y)


readArrayBit arr bit =
    Bits.testBit (Happy_GHC_Exts.I# (indexShortOffAddr arr ((unbox_int bit) `Happy_GHC_Exts.iShiftRA#` 4#))) (bit `Prelude.mod` 16)
  where unbox_int (Happy_GHC_Exts.I# x) = x






data HappyAddr = HappyA# Happy_GHC_Exts.Addr#


-----------------------------------------------------------------------------
-- HappyState data type (not arrays)













-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st1)
             off_i = (off Happy_GHC_Exts.+# nt)
             new_state = indexShortOffAddr happyTable off_i




          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st)
         off_i = (off Happy_GHC_Exts.+# nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (ERROR_TOK is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  ERROR_TOK tk old_st CONS(HAPPYSTATE(action),sts) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        DO_ACTION(action,ERROR_TOK,tk,sts,(saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ((Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = Prelude.error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `Prelude.seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.

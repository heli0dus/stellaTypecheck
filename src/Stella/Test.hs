-- File generated by the BNF Converter (bnfc 2.9.5).
-- | Program to test parser.

module Stella.Test where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , (>>), (>>=), mapM_
  
  , (<>)
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess, exitWith, ExitCode (ExitFailure) )
import Control.Monad      ( when )

import Stella.Abs   (Program)
import Stella.Lex   ( Token, mkPosToken )
import Stella.Par   ( pProgram, myLexer )
import Stella.Print ( Print, printTree )
import Stella.Skel  ()
import Typecheck.Simple
import Util.Types
import System.IO

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run ::  Verbosity -> ParseFun Program -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      let res = checkProgram tree
      case res of
        Right _ -> exitSuccess
        Left err -> exitError err
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

exitError :: TypingError -> IO ()
exitError err = case err of
  ERROR_MISSING_MAIN -> do
    print "ERROR_MISSING_MAIN: main function is missing\n"
    exitWith $ ExitFailure 1
  x -> do
    print $ "Some unknown error occured\n" <> show x <> "\n"
    exitFailure


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  typecheck stdin ."
    , "  (files)         typecheck content of files."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pProgram
    "-s":fs    -> mapM_ (runFile 0 pProgram) fs
    fs         -> mapM_ (runFile 2 pProgram) fs

